%!PS-Adobe-3.0 EPSF-3.0
%%Title: (fig-MJ-logistic.pdf)
%%Version: 1 5
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 17:06:30 01/19/06
%%DocumentData: Clean7Bit
%%BoundingBox: 171 432 468 684
%%HiResBoundingBox: 171.0 432.0 468.0 684.0
%%Pages: 0
%%DocumentProcessColors:
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr SEPS ttf hb Printer/PostScript Color Management 0
%%BeginResource: file Pscript_T42Hdr PSVER
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
%%BeginResource: file Pscript_CFF PSVER
userdict /ct_CffDict 6 dict put     
ct_CffDict begin                    
/F0Subr     
{
    systemdict /internaldict known 
   {
      1183615869 systemdict /internaldict get exec 
       /FlxProc known {save true} {false} ifelse
    } 
   {
      userdict /internaldict known not 
        { 
          userdict /internaldict 
          {
               count 0 eq 
             {/internaldict errordict /invalidaccess get exec} if 
             dup type /integertype ne 
             {/internaldict errordict /invalidaccess get exec} if 
             dup 1183615869 eq
             {pop 0} 
             {/internaldict errordict /invalidaccess get exec} 
             ifelse 
          } 
          dup 14 get 1 25 dict put 
          bind executeonly put 
       } if 
       1183615869 userdict /internaldict get exec 
       /FlxProc known {save true} {false} ifelse
    } ifelse
    [ 
       systemdict /internaldict known not 
       { 100 dict /begin cvx /mtx matrix /def cvx } if 
       systemdict /currentpacking known {currentpacking true setpacking} if 
       { 
          systemdict /internaldict known { 
          1183615869 systemdict /internaldict get exec 
          dup /$FlxDict known not { 
          dup dup length exch maxlength eq 
          { pop userdict dup /$FlxDict known not
          { 100 dict begin /mtx matrix def 
          dup /$FlxDict currentdict put end } if } 
          { 100 dict begin /mtx matrix def 
          dup /$FlxDict currentdict put end } 
          ifelse 
          } if /$FlxDict get begin } if 
          grestore 
          /exdef {exch def} def 
          /dmin exch abs 100 div def 
          /epX exdef /epY exdef 
          /c4y2 exdef /c4x2 exdef /c4y1 exdef /c4x1 exdef /c4y0 exdef /c4x0 exdef 
          /c3y2 exdef /c3x2 exdef /c3y1 exdef /c3x1 exdef /c3y0 exdef /c3x0 exdef 
          /c1y2 exdef /c1x2 exdef /c2x2 c4x2 def /c2y2 c4y2 def 
          /yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def 
          /PickCoords {  
          {c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2} 
          {c3x0 c3y0 c3x1 c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2} 
          ifelse 
          /y5 exdef /x5 exdef /y4 exdef /x4 exdef /y3 exdef /x3 exdef 
          /y2 exdef /x2 exdef /y1 exdef /x1 exdef /y0 exdef /x0 exdef 
          } def 
          mtx currentmatrix pop  
          mtx 0 get abs .00001 lt mtx 3 get abs .00001 lt or 
          {/flipXY -1 def} 
          {mtx 1 get abs .00001 lt mtx 2 get abs .00001 lt or 
          {/flipXY 1 def} 
          {/flipXY 0 def} 
          ifelse } 
          ifelse 
          /erosion 1 def 
          systemdict /internaldict known { 
           1183615869 systemdict /internaldict get exec dup  
          /erosion known 
          {/erosion get /erosion exch def} 
          {pop} 
          ifelse 
          } if 
          yflag 
          {
              flipXY 0 eq c3y2 c4y2 eq or 
             {false PickCoords}
             {
                  /shrink c3y2 c4y2 eq 
                {0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs} ifelse def 
                /yshrink {c4y2 sub shrink mul c4y2 add} def 
                /c1y0 c3y0 yshrink def /c1y1 c3y1 yshrink def 
                /c2y0 c4y0 yshrink def /c2y1 c4y1 yshrink def 
                /c1x0 c3x0 def /c1x1 c3x1 def /c2x0 c4x0 def /c2x1 c4x1 def 
                /dY 0 c3y2 c1y2 sub round 
                dtransform flipXY 1 eq {exch} if pop abs def 
                dY dmin lt PickCoords 
                y2 c1y2 sub abs 0.001 gt {
                   c1x2 c1y2 transform flipXY 1 eq {exch} if  
                   /cx exch def /cy exch def 
                   /dY 0 y2 c1y2 sub round dtransform flipXY 1 eq {exch} 
                   if pop def 
                   dY round dup 0 ne 
                   {/dY exdef } 
                   {pop dY 0 lt {-1}{1} ifelse /dY exdef} 
                   ifelse 
                   /erode PaintType 2 ne erosion 0.5 ge and def  
                   erode {/cy cy 0.5 sub def} if 
                   /ey cy dY add def   
                   /ey ey ceiling ey sub ey floor add def   
                   erode {/ey ey 0.5 add def} if   
                   ey cx flipXY 1 eq {exch} if itransform exch pop  
                   y2 sub /eShift exch def  
                   /y1 y1 eShift add def /y2 y2 eShift add def /y3 y3  
                   eShift add def  
                } if  
             } ifelse  
          } 
          {
              flipXY 0 eq c3x2 c4x2 eq or  
             {false PickCoords }  
             { /shrink c3x2 c4x2 eq  
                {0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs} ifelse def  
                /xshrink {c4x2 sub shrink mul c4x2 add} def  
                /c1x0 c3x0 xshrink def /c1x1 c3x1 xshrink def  
                /c2x0 c4x0 xshrink def /c2x1 c4x1 xshrink def  
                /c1y0 c3y0 def /c1y1 c3y1 def /c2y0 c4y0 def /c2y1 c4y1 def  
                /dX c3x2 c1x2 sub round 0 dtransform  
                flipXY -1 eq {exch} if pop abs def 
                dX dmin lt PickCoords  
                x2 c1x2 sub abs 0.001 gt {  
                   c1x2 c1y2 transform flipXY -1 eq {exch} if  
                   /cy exch def /cx exch def   
                   /dX x2 c1x2 sub round 0 dtransform flipXY -1 eq {exch} if pop def  
                   dX round dup 0 ne  
                   {/dX exdef}  
                   {pop dX 0 lt {-1}{1} ifelse /dX exdef}  
                   ifelse  
                   /erode PaintType 2 ne erosion .5 ge and def 
                   erode {/cx cx .5 sub def} if  
                   /ex cx dX add def  
                   /ex ex ceiling ex sub ex floor add def  
                   erode {/ex ex .5 add def} if  
                   ex cy flipXY -1 eq {exch} if itransform pop  
                   x2 sub /eShift exch def  
                   /x1 x1 eShift add def /x2 x2 eShift add def /x3 x3 eShift add def  
                } if  
             } ifelse  
          } ifelse 
          x2 x5 eq y2 y5 eq or  
          {x5 y5 lineto }  
          {x0 y0 x1 y1 x2 y2 curveto  
          x3 y3 x4 y4 x5 y5 curveto}  
          ifelse  
          epY epX   
       }  
       systemdict /currentpacking known {exch setpacking} if   
       /exec cvx /end cvx 
    ] cvx  
    executeonly 
    exch  
    {pop true exch restore}   
    {   
       systemdict /internaldict known not  
       {1183615869 userdict /internaldict get exec  
       exch /FlxProc exch put true}  
       {1183615869 systemdict /internaldict get exec  
       dup length exch maxlength eq  
       {false}   
       {1183615869 systemdict /internaldict get exec 
       exch /FlxProc exch put true}  
       ifelse}  
       ifelse
    } ifelse  
    {
       systemdict /internaldict known  
       {1183615869 systemdict /internaldict get exec /FlxProc get exec}  
       {1183615869 userdict /internaldict get exec /FlxProc get exec}  
       ifelse   
    } if  
} executeonly def
/F1Subr
{gsave currentpoint newpath moveto} bind def 
/F2Subr
{currentpoint grestore gsave currentpoint newpath moveto} bind  def
/HSSubr 
{
   systemdict /internaldict known not
   {pop 3}
   {1183615869 systemdict /internaldict get exec
    dup /startlock known
    {/startlock get exec}
    {dup /strtlck known
    {/strtlck get exec}
    {pop 3}
    ifelse}
    ifelse}
    ifelse
} bind def
end                                 
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.18 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.18 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Helvetica
[/N9/Helvetica -1 TZ
%%IncludeResource Times-Italic
[/N16/Times-Italic -1 TZ
%%IncludeResource Symbol
[/N15/Symbol -1 TZ
%%IncludeResource Times-Roman
[/N14/Times-Roman -1 TZ

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 972 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:719e53f1-0bab-4996-b1b1-88c40163a111' xmlns:pdf='http://ns.adobe.com/pdf/1.3/'></rdf:Description>
<rdf:Description rdf:about='uuid:719e53f1-0bab-4996-b1b1-88c40163a111' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:ModifyDate='2005-01-19T14:02:17+01:00' xap:CreateDate='2005-01-19T14:00:25+01:00' xap:MetadataDate='2005-01-19T14:02:17+01:00'></rdf:Description>
<rdf:Description rdf:about='uuid:719e53f1-0bab-4996-b1b1-88c40163a111' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:9a894eef-a231-45ee-839b-0fb3d328236f'/>
<rdf:Description rdf:about='uuid:719e53f1-0bab-4996-b1b1-88c40163a111' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'/>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
171 432 297 252 rectclip
%%BeginResource: font D
10 dict begin
T3Defs
/FontType 3 def
/FontName /N22 def
/FontMatrix [1 
0 
0 
1 
0 
0 ]def
/FontBBox [0 
-29 
73 
138 ]def
/Encoding [
1 nND
/a1 /a2 /a3 /a4 /a5 /a6 /a7 /a8 /a9 /a10 /a11 /a12 /a13 /a14 /a15 /a16 /a17 /a18 
/a19 /a20 /a21 /a22 /a23 /a24 /a25 /a26 /a27 /a28 /a29 /a30 /a31 /a32 /a33 /a34 
/a35 /a36 /a37 /a38 /a39 /a40 /a41 /a42 /a43 /a44 /a45 /a46 /a47 /a48 /a49 /a50 
/a51 /a52 /a53 /a54 /a55 /a56 /a57 /a58 
197 nND] def
/GlyphProcs 59 dict begin
/.notdef {250 0 d0} bind def
/a1 {{
0 0 0 0 71 75 setcachedevice
71.0 0.0 0.0 75.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 71 def
/Height 75 def
/ImageMatrix [71.0 0.0 0.0 -75.0 0.0 75.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<800000000001FFFFFE800000000001FFFFFE80000000000003FFFEFFC001FFFF
F003FFFEFFC001FFFFF003FFFEFFF801FFFFFF80FFFEFFF801FFFFFF80FFFEFF
F801FFFFFF801FFEFFF801FFFFFFE01FFEFFF801FFFFFFE01FFEFFF801FFFFFF
FC07FEFFF801FFFFFFFC07FEFFF801FFFFFFFC00FEFFF801FFFFFFFC00FEFFF8
01FFFFFFFC003EFFF801FFFFFFFF003EFFF801FFFFFFFF003EFFF801FFFFFFFF
003EFFF801FFFFFFFF003EFFF801FFFFFFFF000EFFF801FFFFFFFFC00EFFF801
FFFFFFFFC00EFFF801FFFFFFFFC00EFFF801FFFFFFFFC00EFFF801FFFFFFFFC0
0EFFF801FFFFFFFFC00EFFF801FFFFFFFFC000FFF801FFFFFFFFC000FFF801FF
FFFFFFC000FFF801FFFFFFFFC000FFF801FFFFFFFFC000FFF801FFFFFFFFC000
FFF801FFFFFFFFC000FFF801FFFFFFFFC000FFF801FFFFFFFFC000FFF801FFFF
FFFFC000FFF801FFFFFFFFC000FFF801FFFFFFFFC000FFF801FFFFFFFFC000FF
F801FFFFFFFFC000FFF801FFFFFFFFC000FFF801FFFFFFFFC000FFF801FFFFFF
FFC000FFF801FFFFFFFFC000FFF801FFFFFFFFC000FFF801FFFFFFFFC000FFF8
01FFFFFFFFC000FFF801FFFFFFFFC000FFF801FFFFFFFFC00EFFF801FFFFFFFF
C00EFFF801FFFFFFFFC00EFFF801FFFFFFFFC00EFFF801FFFFFFFFC00EFFF801
FFFFFFFF000EFFF801FFFFFFFF000EFFF801FFFFFFFF000EFFF801FFFFFFFF00
3EFFF801FFFFFFFF003EFFF801FFFFFFFF003EFFF801FFFFFFFF003EFFF801FF
FFFFFC00FEFFF801FFFFFFFC00FEFFF801FFFFFFFC00FEFFF801FFFFFFFC07FE
FFF801FFFFFFFC07FEFFF801FFFFFFE01FFEFFF801FFFFFFE01FFEFFF801FFFF
FC001FFEFFF801FFFFFC00FFFEFFF801FFFFFC00FFFEFFC001FFFFF003FFFEFF
C001FFFFF003FFFE800000000001FFFFFE800000000001FFFFFE800000000001
FFFFFE>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
71 75 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a2 {{
0 0 0 0 71 75 setcachedevice
71.0 0.0 0.0 75.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 71 def
/Height 75 def
/ImageMatrix [71.0 0.0 0.0 -75.0 0.0 75.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<8000000FFFFFFF1FFE8000000FFFFFFF1FFE8000000FFFFFFC1FFEFF000FFFFF
FFFC1FFEFF000FFFFFFFFC1FFEFFC03FFFFFFFFC1FFEFFC03FFFFFFFFC1FFEFF
C03FFFFFFFE01FFEFFF8FFFFFFFFE01FFEFFF8FFFFFFFFE01FFEFFF8FFFFFFFF
E01FFEFFF8FFFFFFFFE01FFEFFF8FFFFFFFF801FFEFFF8FFFFFFFF801FFEFFF8
FFFFFFFC001FFEFFF8FFFFFFFC001FFEFFF8FFFFFFFC001FFEFFF8FFFFFFFC00
1FFEFFF8FFFFFFFC001FFEFFF8FFFFFFF0001FFEFFF8FFFFFFF0031FFEFFF8FF
FFFFF0031FFEFFF8FFFFFFF0031FFEFFF8FFFFFFF0031FFEFFF8FFFFFFC00F1F
FEFFF8FFFFFFC00F1FFEFFF8FFFFFE000F1FFEFFF8FFFFFE007F1FFEFFF8FFFF
FE007F1FFEFFF8FFFFFE007F1FFEFFF8FFFFFE007F1FFEFFF8FFFFF8007F1FFE
FFF8FFFFF801FF1FFEFFF8FFFFF801FF1FFEFFF8FFFFF801FF1FFEFFF8FFFFF8
01FF1FFEFFF8FFFFC00FFF1FFEFFF8FFFFC00FFF1FFEFFF8FFFF000FFF1FFEFF
F8FFFF003FFF1FFEFFF8FFFF003FFF1FFEFFF8FFFF003FFF1FFEFFF8FFFF003F
FF1FFEFFF8FFFC003FFF1FFEFFF8FFFC00FFFF1FFEFFF8FFFC00FFFF1FFEFFF8
FFFC00FFFF1FFEFFF8FFFC00FFFF1FFEFFF8FFE007FFFF1FFEFFF8FFE007FFFF
1FFEFFF8FF8007FFFF1FFEFFF8FF801FFFFF1FFEFFF8FF801FFFFF1FFEFFF8FF
801FFFFF1FFEFFF8FF801FFFFF1FFEFFF8FC001FFFFF1FFEFFF8FC00FFFFFF1F
FEFFF8FC00FFFFFF1FFEFFF8FC00FFFFFF1FFEFFF8FC00FFFFFF1FFEFFF8F003
FFFFFF1FFEFFF8F003FFFFFF1FFEFFF8C003FFFFFF1FFEFFF8C00FFFFFFF1FFE
FFF8C00FFFFFFF1FFEFFF8C00FFFFFFF1FFEFFF8C00FFFFFFF1FFEFFF8000FFF
FFFC07FEFFF8007FFFFFFC07FEFFF8007FFFFFFC07FEFFF8007FFFFFE000FEFF
F8007FFFFFE000FE800001FFFFF0000000800001FFFFF0000000800001FFFFF0
000000>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
71 75 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a3 {{
0 0 0 29 56 77 setcachedevice
56.0 0.0 0.0 48.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 56 def
/Height 48 def
/ImageMatrix [55.999996 0.0 0.0 -47.999996 0.0 47.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FF07FFFFF801FFFF07FFFFF801FFFC07FFFFC0007FFC07FFFFC0FC7FFC07FFFF
C0FC7FFF00FFFFC0FF8FFF00FFFFC0FF8FFF00FFFF00FF8FFF00FFFF00FF8FFF
00FFFF00FF8FFF00FFFF00FFE3FF00FFFF00FFE3FF00FFFFC03FE3FF00FFFFC0
3FE3FF003FFFC03FE0FFC03FFFC03FFCFFC03FFFC03FFCFFC03FFFF80FFFFFC0
3FFFF80FFFFFC03FFFF80FFFFFC03FFFF80FFFFFC03FFFF80FFFFFC03FFFF80F
FFFFC03FFFF80FFFFFF80FFFFE01FFFFF80FFFFE01FFFFF80FFFFE01FFFFF80F
FFFE01FFFFF80FFFFE01FFFFF80FFFFE01FFFFF80FFFFE01FF8FF80FFFFE01FF
8FF80FFFFE01FF8FF80FFFFE01FFE3FE01FFFFC07FE3FE01FFFFC07FE3FE01FF
FFC07FE3FE01FFFFC07FE3FE007FFFC07FE3FE007FFFC07FE3FE007FFFC07FFC
FE018FFFC1FFFCFE018FFFC1FFFCFE0180FE01FFFCFE0FE0FE0FFFFCFE0FE0FE
0FFFFF003FFF003FFFFF003FFF003FFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
56 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a4 {{
89 0 0 0 0 0 setcachedevice
} exec } bind def
/a5 {{
0 0 0 9 64 72 setcachedevice
64.0 0.0 0.0 63.0 0.0 9.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 64 def
/Height 63 def
/ImageMatrix [64.0 0.0 0.0 -62.999996 0.0 62.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<8000000FFFFFFFFF8000000FFFFFFFFF8000000FFFFFFFFFFFC03FFFFFFFFFFF
FFC03FFFFFFFFFFFFFF80FFFFFFFFFFFFFF80FFFFFFFFFFFFFF80FFFFFFFFFFF
FFF80FFFFFFFFFFFFFF80FFFFFFFFFFFFFF80FFFFFFFFFFFFFF80FFFFFFFFFFF
FFF80FFFFFFFFFFFFFF80FFFFFFFFFFFFFF801FFFFFFFFFFFFFE01FFFFFFFFFF
FFFE01FFFFFFFFFFFFFE01FFFFFFFFFFFFFE01FFFFFFFFFFFFFE01FFFFFFFFFF
FFFE01FFFFFFFFFFFFFE01FFFFFFFFFFFFFE01FFFFFFFFFFFFFE01FFFFFFFFFF
FFFFC07FFFFFFFFFFFFFC07FFFFFFFFFFFFFC07FFFFFFFFFFFFFC07FFFFFFFFF
FFFFC07FFFFFFFFFFFFFC0000001FFFFFFFFC0000001FFFFFFFFC00000000FFF
FFFFC07FFFF00FFFFFFFC07FFFF00FFFFFFFF00FFFFC00FFFFFFF00FFFFC00FF
FFFFF00FFFFF801FFFFFF00FFFFF801FFFFFF00FFFFF8007FFFFF00FFFFFE007
FFFFF00FFFFFE007FFFFF00FFFFFE007FFFFF00FFFFFE007FFFFF003FFFFE000
FFFFFC03FFFFFC00FFFFFC03FFFFFC00FFFFFC03FFFFFC00FFFFFC03FFFFFC00
FFFFFC03FFFFFC00FFFFFC03FFFFFC00FFFFFC03FFFFFC00FFFFFC03FFFFFC00
FFFFFC03FFFFFC00FFFFFF80FFFFFC07FFFFFF80FFFFFC07FFFFFF80FFFFFC07
FFFFFF80FFFFFC07FFFFFF80FFFFFC07FFFFFF80FFFF801FFFFFFF80FFFF801F
FFFFC000000003FFFFFFC000000003FFFFFFC000000003FF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
64 63 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a6 {{
41 0 0 0 0 0 setcachedevice
} exec } bind def
/a7 {{
0 0 0 4 22 96 setcachedevice
22.0 0.0 0.0 92.0 0.0 4.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 22 def
/Height 92 def
/ImageMatrix [22.0 0.0 0.0 -92.0 0.0 92.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFE0FFFFE0FFFF80FFFF8CFFFF8CFFFE7CFFFE7CFFF07CFFF1FCFFF1FCFFC1
FCFFC1FCFFC7FCFFC7FCFE07FCFE07FCFE07FCF83FFCF83FFCF83FFCF83FFCF8
3FFCF83FFCF83FFCE0FFFCE0FFFCE0FFFCE0FFFCE0FFFCE0FFFCE0FFFCE0FFFC
E0FFFCE0FFFC00FFFC00FFFC00FFFC00FFFC00FFFC00FFFC00FFFC00FFFC00FF
FC00FFFC00FFFC00FFFC00FFFC00FFFC00FFFC00FFFC00FFFC00FFFC00FFFC00
FFFC00FFFC00FFFC00FFFC00FFFCE0FFFCE0FFFCE0FFFCE0FFFCE0FFFCE0FFFC
E0FFFCE0FFFCE0FFFCE03FFCF83FFCF83FFCF83FFCF83FFCF83FFCF83FFCF807
FCFE07FCFE07FCFFC7FCFFC7FCFFC1FCFFC1FCFFC1FCFFF1FCFFF1FCFFFE7CFF
FE7CFFFE0CFFFF8CFFFF8CFFFFE0FFFFE0FFFFE0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
22 92 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a8 {{
75 0 0 0 0 0 setcachedevice
} exec } bind def
/a9 {{
0 0 0 -46 23 46 setcachedevice
23.0 0.0 0.0 92.0 0.0 -46.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 23 def
/Height 92 def
/ImageMatrix [23.0 0.0 0.0 -92.0 0.0 92.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<8FFFFE8FFFFE83FFFEE3FFFEE3FFFEFCFFFEFCFFFEFC1FFEFF1FFEFF1FFEFF07
FEFF07FEFFC7FEFFC7FEFFC0FEFFC0FEFFC0FEFFF83EFFF83EFFF83EFFF83EFF
F83EFFF83EFFF83EFFFE0EFFFE0EFFFE0EFFFE0EFFFE0EFFFE0EFFFE0EFFFE0E
FFFE0EFFFE0EFFFE00FFFE00FFFE00FFFE00FFFE00FFFE00FFFE00FFFE00FFFE
00FFFE00FFFE00FFFE00FFFE00FFFE00FFFE00FFFE00FFFE00FFFE00FFFE00FF
FE00FFFE00FFFE00FFFE00FFFE00FFFE0EFFFE0EFFFE0EFFFE0EFFFE0EFFFE0E
FFFE0EFFFE0EFFFE0EFFF80EFFF83EFFF83EFFF83EFFF83EFFF83EFFF83EFFC0
3EFFC0FEFFC0FEFFC7FEFFC7FEFF07FEFF07FEFF07FEFF1FFEFF1FFEFCFFFEFC
FFFEE0FFFEE3FFFEE3FFFE8FFFFE8FFFFE8FFFFE>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
23 92 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a10 {{
57 0 0 0 0 0 setcachedevice
} exec } bind def
/a11 {{
0 0 0 -41 22 22 setcachedevice
22.0 0.0 0.0 63.0 0.0 -41.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 22 def
/Height 63 def
/ImageMatrix [22.0 0.0 0.0 -62.999996 0.0 62.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<000000000000000000FE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01
FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE
01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FC
FE01FCFE01FCFE01FCFE01FC0001FC0001FC0001FCFFFFFCFFFFFCFFFFFCFFFF
FCFFFFFCFFFFFCFFFFFCFFFFFCFFFFFCFFFFFCFFFFFCFFFFFCFFFFFCFFFFFCFE
0FFCFE0FFCF801FCF801FCF801FCF801FCF801FCFE0FFCFE0FFCFE0FFC>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
22 63 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a12 {{
64 0 0 0 0 0 setcachedevice
} exec } bind def
/a13 {{
0 0 0 -17 30 22 setcachedevice
30.0 0.0 0.0 39.0 0.0 -17.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 30 def
/Height 39 def
/ImageMatrix [29.999998 0.0 0.0 -38.999996 0.0 38.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<1FC003FC1FC003FC0000007C003FFC7C003FFC7C03FFFF1C03FFFF1C03FFFF00
03FFFF0003FFFF001FFFFF001FFFFF001FFFFC001FFFFC001FFFF000FFFFF000
FFFFF000FF00001CFF00001CF800001CF800007CF800007CE0000FFCE0000FFC
003FFFFC003FFFFC003FFF1C03FFFF1C03FFFF1C03FFFF1C03FFFF1C03FFFF1C
E3FFFF1CE3FFFF1CE0FFF01CE0FFF01CFF000F1CFF000F1CFF000F1C>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
30 39 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a14 {{
26 0 0 0 0 0 setcachedevice
} exec } bind def
/a15 {{
0 0 0 -17 40 22 setcachedevice
40.0 0.0 0.0 39.0 0.0 -17.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 40 def
/Height 39 def
/ImageMatrix [40.0 0.0 0.0 -39.0 0.0 39.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FF003F801FFF003F801FE000000000E01FC000C0E01FC000C080FFF003F880FF
F003F880FFF003F880FFFC03F880FFFC03F880FFFC03F880FFFC03F880FFFC03
FF80FFFC03FF801FFC03FFE01FFC03FFE01FFC03FFFC1FFC03FFFC1FFC03FFFC
00FC03FFFF00FC03FFFF00FC03FFFFF80003FFFFF80003FFFFFFFC03FFFFFFFC
03FFFFFFFC03FFFFFFFC03FFFFFFFC03FFFCFFFC03FFFCFFFC03FFE01FF003FF
E01FF00FFFE01FF00FFFE01FF07FFFE01FF07FFFFC0001FFFFFC0001FFFFFC00
01FFFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
40 39 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a16 {{
71 0 0 0 0 0 setcachedevice
} exec } bind def
/a17 {{
0 0 0 -17 70 22 setcachedevice
70.0 0.0 0.0 39.0 0.0 -17.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 70 def
/Height 39 def
/ImageMatrix [70.0 0.0 0.0 -39.0 0.0 39.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<000003E00003E00000000003E00003E00000000003E00003E00000FF01FFFF01
FFFF01FCFF01FFFF01FFFF01FCFF01FFFF01FFFF01FCFF01FFFF01FFFF01FCFF
01FFFF01FFFF01FCFF01FFFF01FFFF01FCFF01FFFF01FFFF01FCFF01FFFF01FF
FF01FCFF01FFFF01FFFF01FCFF01FFFF01FFFF01FCFF01FFFF01FFFF01FCFF01
FFFF01FFFF01FCFF01FFFF01FFFF01FCFF01FFFF01FFFF01FCFF01FFFF01FFFF
01FCFF01FFFF01FFFF01FCFF01FFFF01FFFF01FCFF01FFFF01FFFF01FCFF01FF
FF01FFFF01FCFF01FFFF01FFFF01FCFF01FFFF01FFFF01FCFF01FFFF01FFFF01
FCFF01FFFF01FFFF01FCFF01FFFF01FFFF01FCFF01FFFF01FFFF01FCFF01FFFF
01FFFF01FCFF003FFF003FFF01FCFF003FFF003FFF01FCFF003FFF003FFF01FC
FF003FFF003FFF01FCFF003FFF003FFF01FCFF0183F80783F807FCFF0183F807
83F807FC0001FC003FFC003FFC0001FC003FFC003FFC0001FC003FFC003FFC>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
70 39 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a18 {{
77 0 0 0 0 0 setcachedevice
} exec } bind def
/a19 {{
0 0 0 -17 44 22 setcachedevice
44.0 0.0 0.0 39.0 0.0 -17.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 44 def
/Height 39 def
/ImageMatrix [44.0 0.0 0.0 -39.0 0.0 39.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<0001FF0000000001FF0000000001FF000000F807FFE007F0F807FFE007F0FF07
FFE03FF0FF07FFE03FF0FF07FF003FF0FFC7FF00FFF0FFC7FF00FFF0FFF1FF00
FFF0FFF1FF00FFF0FFFE3C03FFF0FFFE3C03FFF0FFFE0003FFF0FFFE001FFFF0
FFFE001FFFF0FFFF801FFFF0FFFF801FFFF0FFFF801FFFF0FFFF807FFFF0FFFF
807FFFF0FFFE007FFFF0FFFE007FFFF0FFF00C1FFFF0FFF00C1FFFF0FFF00C1F
FFF0FFF00F1FFFF0FFF00F1FFFF0FFC03FE3FFF0FFC03FE3FFF0FF003FE0FFF0
FF01FFE0FFF0FF01FFE0FFF0F801FFE03FF0F801FFE03FF000000F0000300000
0F00003000000F000030>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
44 39 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a20 {{
0 0 0 -34 27 22 setcachedevice
27.0 0.0 0.0 56.0 0.0 -34.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 27 def
/Height 56 def
/ImageMatrix [27.0 0.0 0.0 -55.999996 0.0 55.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFE03E0FFFE03E0FFC00060FFC03C60FFC03C60FF01FF00FF01FF00FF01FF00
FF01FF00FF01FF00FF01FF00FF01FF00FF01FF00FF01FF00FF01FF00FF01FF00
FF01FF00FF01FFE0FF01FFE0FF01FFE0FF01FFE0FF01FFE0FF01FFE0FF01FFE0
FF01FFE0FF01FFE0FF01FFE0FF01FFE0FF01FFE0FF01FFE0FF01FFE0FF01FFE0
FF01FFE0FF01FFE0FF01FFE0FF01FFE0000000600000006000000060F801FFE0
F801FFE0FF01FFE0FF01FFE0FF01FFE0FFC1FFE0FFC1FFE0FFC1FFE0FFC1FFE0
FFF1FFE0FFF1FFE0FFF1FFE0FFF1FFE0FFF1FFE0FFF1FFE0FFF1FFE0FFF1FFE0
>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
27 56 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a21 {{
48 0 0 0 0 0 setcachedevice
} exec } bind def
/a22 {{
0 0 0 -17 44 22 setcachedevice
44.0 0.0 0.0 39.0 0.0 -17.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 44 def
/Height 39 def
/ImageMatrix [44.0 0.0 0.0 -39.0 0.0 39.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFF000780000FFF000780000FFC000180000FFC1FF1807F0FFC1FF1807F0FF01
FFE007F0FF01FFE007F0FF01FFE007F0FF01FFF807F0FF01FFF807F0FF01FFF8
07F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0
FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01
FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF8
07F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0
FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F00001FC0007F00001
FC0007F00001FC0007F0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
44 39 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a23 {{
36 0 0 0 0 0 setcachedevice
} exec } bind def
/a24 {{
0 0 0 -17 30 22 setcachedevice
30.0 0.0 0.0 39.0 0.0 -17.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 30 def
/Height 39 def
/ImageMatrix [29.999998 0.0 0.0 -38.999996 0.0 38.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<0000007C0000007C0000007CFF01FFFCFF01FFFCFF01FFFCFF01FFFCFF01FFFC
FF01FFFCFF01FFFCFF01FFFCFF01FFFCFF01FFFCFF01FFFCFF01FFFCFF01FFFC
FF01FFFCFF01FFFCFF01FFFCFF01FFFCFF01FFFCFF01FFFCFF01FFFCFF01FFFC
FF01FFFCFF01FFFCFF01FFFCFF01FFFCFF01FFFCFF003F1CFF003F1CFF003C00
FF003C00FF003C00FF018C00FF018C000001F01C0001F01C0001F01C>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
30 39 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a25 {{
51 0 0 0 0 0 setcachedevice
} exec } bind def
/a26 {{
0 0 0 -17 34 22 setcachedevice
34.0 0.0 0.0 39.0 0.0 -17.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 34 def
/Height 39 def
/ImageMatrix [34.0 0.0 0.0 -39.0 0.0 39.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFF0001FC0FFF0001FC0FFC00000C0FFC1FFE0C0FFC1FFE0C0F807FFF8C0F807
FFF8C0F807FFF800F83FFFFF00F83FFFFF00E0FFFFFFC0E0FFFFFFC000FFFFFF
C000FFFFFFC000FFFFFFC000FFFFFFC000FFFFFFC000FFFFFFC000FFFFFFC000
FFFFFFC000FFFFFFC000FFFFFFC00000000000000000000000FFFFF80000FFFF
F80000FFFFF800E0FFFFF800E0FFFFF800E03FFFE0C0E03FFFE0C0E03FFFE0C0
F83FFFE0C0F83FFFE0C0FF01FF03C0FF01FF03C0FFF0007FC0FFF0007FC0FFF0
007FC0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
34 39 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a27 {{
0 0 0 -41 44 22 setcachedevice
44.0 0.0 0.0 63.0 0.0 -41.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 44 def
/Height 63 def
/ImageMatrix [44.0 0.0 0.0 -62.999996 0.0 62.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFF000780000FFF000780000FF0000180000FF01FF1807F0FF01FF1807F0F807
FFE007F0F807FFE007F0E007FFE007F0E03FFFF807F0E03FFFF807F0E0FFFFF8
07F0E0FFFFF807F000FFFFF807F000FFFFF807F000FFFFF807F000FFFFF807F0
00FFFFF807F000FFFFF807F000FFFFF807F000FFFFF807F000FFFFF807F000FF
FFF807F000FFFFF807F000FFFFF807F000FFFFF807F000FFFFF807F0003FFFF8
07F0E03FFFF807F0E03FFFF807F0F83FFFF807F0F83FFFF807F0F807FFF807F0
F807FFF807F0F807FFF807F0FFC1FF0007F0FFC1FF0007F0FFFE007807F0FFFE
007807F0FFFE007807F0FFFFFFF807F0FFFFFFF807F0FFFFFFF807F0FFFFFFF8
07F0FFFFFFF807F0FFFFFFF807F0FFFFFFF807F0FFFFFFF807F0FFFFFFF807F0
FFFFFFF807F0FFFFFFF807F0FFFFFFF807F0FFFFFFF807F0FFFFFFF807F0FFFF
FFF807F0FFFFFFF807F0FFFFFFF807F0FFFFFFF807F0FFFFFFF807F0FFFFFFF8
07F0FFFFFFF807F0FFFFFC0007F0FFFFFC0007F0FFFFFC0007F0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
44 63 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a28 {{
74 0 0 0 0 0 setcachedevice
} exec } bind def
/a29 {{
50 0 0 0 0 0 setcachedevice
} exec } bind def
/a30 {{
0 0 0 -17 44 22 setcachedevice
44.0 0.0 0.0 39.0 0.0 -17.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 44 def
/Height 39 def
/ImageMatrix [44.0 0.0 0.0 -39.0 0.0 39.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<000003E00000000003E00000000003E00000FF01FFF807F0FF01FFF807F0FF01
FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF8
07F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0
FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01
FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF8
07F0FF01FFF807F0FF01FFF807F0FF003FF807F0FF003FF807F0FF003FF807F0
FF003FF807F0FF003FF807F0FF018FF83FF0FF018FF83FF00001F000FFF00001
F000FFF00001F000FFF0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
44 39 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a31 {{
34 0 0 0 0 0 setcachedevice
} exec } bind def
/a32 {{
0 0 0 -17 42 39 setcachedevice
42.0 0.0 0.0 56.0 0.0 -17.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 42 def
/Height 56 def
/ImageMatrix [42.0 0.0 0.0 -55.999996 0.0 55.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<E007FFFFFFC0E007FFFFFFC0E007FFFFFFC000F1FFFFFFC000F1FFFFFFC000FE
3FFFFFC000FE3FFFFFC000FE0FFFFFC000FF8FFFFFC000FF8FFFFFC0FFFF8FFF
FFC0FFFF8FFFFFC0FFFF8FFFFFC0FFFF8FFFFFC0FFFF8FFFFFC0FFFFF3FFFFC0
FFFFF3FFFFC0FFFFF3FFFFC0FFFFF3FFFFC0FFFF807FFFC0FFFF807FFFC0FFFF
807FFFC0FFFF807FFFC0FFFF807FFFC0FFFF807FFFC0FFFF807FFFC0FFFF807F
FFC0FFFE031FFFC0FFFE031FFFC0FFFE031FFFC0FFFE031FFFC0FFF00303FFC0
FFF003E3FFC0FFF003E3FFC0FFF00FE3FFC0FFF00FE3FFC0FFF00FE3FFC0FFF0
0FE3FFC0FFF00FE3FFC0FFC03FF8FFC0FFC03FF8FFC0FFC03FF8FFC0FFC03FF8
FFC0FF003FF83FC0FF003FF83FC0FF003FF83FC0FF01FFFF3FC0FF01FFFF3FC0
FF01FFFF3FC0FF01FFFF3FC0FF01FFFF3FC0F801FFFF07C0F801FFFF07C00000
0FE0000000000FE0000000000FE00000>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
42 56 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a33 {{
33 0 0 0 0 0 setcachedevice
} exec } bind def
/a34 {{
86 0 0 0 0 0 setcachedevice
} exec } bind def
/a35 {{
44 0 0 0 0 0 setcachedevice
} exec } bind def
/a36 {{
82 0 0 0 0 0 setcachedevice
} exec } bind def
/a37 {{
0 0 0 -41 32 22 setcachedevice
32.0 0.0 0.0 63.0 0.0 -41.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 32 def
/Height 63 def
/ImageMatrix [32.0 0.0 0.0 -62.999996 0.0 62.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<C000001FC000001FC000001FFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFF
FFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFF
FFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFF
FFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFF
FFC07FFFFFC07FFFFFC07FFFFFC07FFF000000FF000000FF000000FFFFC07FFF
FFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFF
FFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FFFFFC07FC7FFC07FC7FFC00F00
FFF00F00FFF00F00FFFC0FC0FFFC0FC0FFFF8007FFFF8007FFFF8007>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
32 63 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a38 {{
24 0 0 0 0 0 setcachedevice
} exec } bind def
/a39 {{
0 0 0 -17 61 22 setcachedevice
61.0 0.0 0.0 39.0 0.0 -17.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 61 def
/Height 39 def
/ImageMatrix [61.000004 0.0 0.0 -38.999996 0.0 38.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFF8FFFFF8FFFF8FFFF8FFFFF8FFFF8FFFF83FFFE0FFFF8FFFF83FFFE0FFFF8
FFFF83FFFE0FFFF8FFFE03FFFE03FFF8FFFE03FFFE03FFF8FFFE03FFFE03FFF8
FFFE03FFFE03FFF8FFFE03FFFE03FFF8FFFE007FF003FFF8FFFE007FF003FFF8
FFF00C7FF00C7FF8FFF00C7FF00C7FF8FFF00C7FF00C7FF8FFF00C7FF03C7FF8
FFF00C7FF03C7FF8FFC00F1FC03C1FF8FFC00F1FC03C1FF8FFC00F1FC03C1FF8
FFC03F1FC03F1FF8FFC03F1FC03F1FF8FFC03F1FC1FF1FF8FFC03F1FC1FF1FF8
FF003FE301FF03F8FF003FE301FF03F8FF003FE301FF03F8FF01FFE301FFE3F8
FF01FFE301FFE3F8FF01FFE307FFE3F8FF01FFE307FFE3F8F801FFE007FFE0F8
F807FFF807FFE0F8F807FFF807FFE0F8F801FFF807FFE038F801FFF807FFE038
00000F00003C000000000F00003C000000000F00003C0000>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
61 39 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a40 {{
65 0 0 0 0 0 setcachedevice
} exec } bind def
/a41 {{
72 0 0 0 0 0 setcachedevice
} exec } bind def
/a42 {{
49 0 0 0 0 0 setcachedevice
} exec } bind def
/a43 {{
84 0 0 0 0 0 setcachedevice
} exec } bind def
/a44 {{
0 0 0 -41 44 22 setcachedevice
44.0 0.0 0.0 63.0 0.0 -41.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 44 def
/Height 63 def
/ImageMatrix [44.0 0.0 0.0 -62.999996 0.0 62.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<000003E00000000003E00000000003E00000FF01FFF807F0FF01FFF807F0FF01
FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF8
07F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0
FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01
FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF807F0FF01FFF8
07F0FF01FFF807F0FF01FFF807F0FF003FF807F0FF003FF807F0FF003FF807F0
FF003FF807F0FF003FF807F0FF018FF83FF0FF018FF83FF0FF01F000FFF0FF01
F000FFF0FF01F000FFF0FF01FFFFFFF0FF01FFFFFFF0FF01FFFFFFF0FF01FFFF
FFF0FF01FFFFFFF0FF01FFFFFFF0FF01FFFFFFF0FF01FFFFFFF0FF01FFFFFFF0
FF01FFFFFFF0FF01FFFFFFF0FF01FFFFFFF0FF01FFFFFFF0FF01FFFFFFF0FF01
FFFFFFF0FF01FFFFFFF0FF01FFFFFFF0FF01FFFFFFF0FF01FFFFFFF0FF01FFFF
FFF0FF01FFFFFFF00001FFFFFFF00001FFFFFFF00001FFFFFFF0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
44 63 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a45 {{
0 0 0 -17 39 22 setcachedevice
39.0 0.0 0.0 39.0 0.0 -17.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 39 def
/Height 39 def
/ImageMatrix [39.0 0.0 0.0 -39.0 0.0 39.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFF0001FFEFFF0001FFEFF000000FEFF01FF00FEFF01FF00FEF807FFE03EF807
FFE03EE007FFE006E03FFFF806E03FFFF806E0FFFFFF06E0FFFFFF0600FFFFFF
0000FFFFFF0000FFFFFF0000FFFFFF0000FFFFFF0000FFFFFF0000FFFFFF0000
FFFFFF0000FFFFFF0000FFFFFF0000FFFFFF0000FFFFFF0000FFFFFF0000FFFF
FF0000FFFFFF00E0FFFFFF06E0FFFFFF06E03FFFF806E03FFFF806E03FFFF806
F83FFFF83EF83FFFF83EFF01FF00FEFF01FF00FEFFF0001FFEFFF0001FFEFFF0
001FFE>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
39 39 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a46 {{
0 0 0 -41 22 22 setcachedevice
22.0 0.0 0.0 63.0 0.0 -41.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 22 def
/Height 63 def
/ImageMatrix [22.0 0.0 0.0 -62.999996 0.0 62.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<000000000000000000FE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01
FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE
01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FC
FE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01
FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE
01FCFE01FCFE01FCFE01FCFE01FCFE01FCFE01FC0001FC0001FC0001FC>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
22 63 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a47 {{
39 0 0 0 0 0 setcachedevice
} exec } bind def
/a48 {{
60 0 0 0 0 0 setcachedevice
} exec } bind def
/a49 {{
69 0 0 0 0 0 setcachedevice
} exec } bind def
/a50 {{
70 0 0 0 0 0 setcachedevice
} exec } bind def
/a51 {{
45 0 0 0 0 0 setcachedevice
} exec } bind def
/a52 {{
0 0 0 -41 54 22 setcachedevice
54.0 0.0 0.0 63.0 0.0 -41.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 54 def
/Height 63 def
/ImageMatrix [54.0 0.0 0.0 -62.999996 0.0 62.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<8000000000007C8000000000007C8000000000007CFFC03FFFFFC07CFFC03FFF
FFC07CFFC03FFFFFF00CFFC03FFFFFF00CFFC03FFFFFF00CFFC03FFFFFFC0CFF
C03FFFFFFC0CFFC03FFFFFFF8CFFC03FFFFFFF8CFFC03FFFFFFF8CFFC03FFFFF
FF8CFFC03FFFFFFF8CFFC03FFFFFFF8CFFC03FFFFFFF8CFFC03FFFFFFFE0FFC0
3FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFF1FFF
FCFFC03FFF1FFFFCFFC03FFF1FFFFCFFC03FFF1FFFFCFFC03FFF1FFFFCFFC03F
FF1FFFFCFFC03FFF1FFFFCFFC03FFC1FFFFCFFC03FFC1FFFFCFFC000001FFFFC
FFC000001FFFFCFFC000001FFFFCFFC03FFC1FFFFCFFC03FFC1FFFFCFFC03FFF
1FFFFCFFC03FFF1FFFFCFFC03FFF1FFFFCFFC03FFF1FFFFCFFC03FFF1FFFFCFF
C03FFF1FFFFCFFC03FFF1FFFFCFFC03FFF1FFF8CFFC03FFFFFFF8CFFC03FFFFF
FF8CFFC03FFFFFFF8CFFC03FFFFFFF8CFFC03FFFFFFF8CFFC03FFFFFFF8CFFC0
3FFFFFFC0CFFC03FFFFFFC0CFFC03FFFFFFC0CFFC03FFFFFFC7CFFC03FFFFFFC
7CFFC03FFFFFF07CFFC03FFFFFF07CFFC03FFFFFF07CFFC03FFFFFC07CFFC03F
FFFFC07C8000000000007C8000000000007C8000000000007C>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
54 63 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a53 {{
0 0 0 -41 73 22 setcachedevice
73.0 0.0 0.0 63.0 0.0 -41.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 73 def
/Height 63 def
/ImageMatrix [73.0 0.0 0.0 -63.0 0.0 63.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<800001FF07FC00000000800001FF07FC00000000800001FF07FC00000000FF00
FFFF07FFFF00FF80FF00FFFF07FFFF00FF80FFC7FFFF07FFFF00FF80FFC7FFFF
07FFFF00FF80FFC7FFFC00FFFF00FF80FFC7FFFC00FFFF00FF80FFC7FFFC00FF
FF00FF80FFC7FFFC00FFFF00FF80FFC7FFFC00FFFF00FF80FFC7FFFC00FFFF00
FF80FFC7FFFC00FFFF00FF80FFC7FFE0003FFF00FF80FFC7FFE01E3FFF00FF80
FFC7FFE01E3FFF00FF80FFC7FFE01E3FFF00FF80FFC7FFE01E3FFF00FF80FFC7
FFE01E3FFF00FF80FFC7FFE01E3FFF00FF80FFC7FFE01E3FFF00FF80FFC7FF80
FFCFFF00FF80FFC7FF80FFCFFF00FF80FFC7FF80FFCFFF00FF80FFC7FF80FFCF
FF00FF80FFC7FF80FFCFFF00FF80FFC7FF80FFCFFF00FF80FFC7FF80FFCFFF00
FF80FFC7FC03FFF1FF00FF80FFC7FC03FFF1FF00FF80FFC7FC03FFF1FF00FF80
FFC7FC03FFF1FF00FF80FFC7FC03FFF1FF00FF80FFC7F00FFFFC7F00FF80FFC7
F00FFFFC7F00FF80FFC7F00FFFFC7F00FF80FFC7F00FFFFC7F00FF80FFC7F00F
FFFC7F00FF80FFC7F00FFFFC7F00FF80FFC7F00FFFFC7F00FF80FFC7C07FFFFF
8F00FF80FFC7C07FFFFF8F00FF80FFC7C07FFFFF8F00FF80FFC7C07FFFFF8F00
FF80FFC7C07FFFFF8F00FF80FFC7C07FFFFF8F00FF80FFC7C07FFFFF8F00FF80
FFC601FFFFFFE300FF80FFC601FFFFFFE300FF80FFC601FFFFFFE300FF80FFC6
01FFFFFFE300FF80FFC601FFFFFFE300FF80FFC601FFFFFFE300FF80FFC601FF
FFFFE300FF80FFC001FFFFFFE000FF80FFC00FFFFFFFFC00FF80FFC00FFFFFFF
FC00FF80FFC00FFFFFFFFC00FF80FFC00FFFFFFFFC00FF8080000FFFFFFFFC00
000080000FFFFFFFFC00000080000FFFFFFFFC000000>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
73 63 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a54 {{
63 0 0 0 0 0 setcachedevice
} exec } bind def
/a55 {{
115 0 0 0 0 0 setcachedevice
} exec } bind def
/a56 {{
0 0 0 -17 39 41 setcachedevice
39.0 0.0 0.0 58.0 0.0 -17.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 39 def
/Height 58 def
/ImageMatrix [39.0 0.0 0.0 -58.0 0.0 58.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFF0001FFEFFF0001FFEF80000003EF807FFE03EF807FFE03EE0FFFFFF06E0FF
FFFF0603FFFFFFC003FFFFFFC003FFFFFFC003FFFFFFC003FFFFFFC003FFFFFF
C003FFFFFFC003FFFFFFC003FFFFFFC003FFFFFFC0E0FFFFF800E0FFFFF800FF
00000006FF00000006F800000006F80000003EF80000003EF8000003FEF80000
03FEE0000003FEE03FFFFFFEE03FFFFFFEE0FFFFFFFEE0FFFFFFFEF8FFFFFFFE
F8FFFFFFFEF8C0007FFEF8C0007FFEF8C0007FFEFF07FC1FFEFF07FC1FFEF807
FC03FEF83FFF03FEF83FFF03FEE03FFF00FEE03FFF00FEE03FFF00FEE03FFF00
FEE03FFF00FEE03FFF00FEE03FFF00FEE03FFF00FEE03FFF00FEE03FFF00FEF8
3FFF03FEF83FFF03FEFF07FC03C0FF07FC03C0FFC0007806FFC0007806FFC000
7806>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
39 58 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a57 {{
46 0 0 0 0 0 setcachedevice
} exec } bind def
/a58 {{
0 0 0 0 24 5 setcachedevice
24.0 0.0 0.0 5.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 24 def
/Height 5 def
/ImageMatrix [24.0 0.0 0.0 -5.0 0.0 5.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<000000000000000000000000000000>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
24 5 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/D/N22 -1 TZ
%%BeginResource: font A
10 dict begin
T3Defs
/FontType 3 def
/FontName /N19 def
/FontMatrix [1 
0 
0 
1 
0 
0 ]def
/FontBBox [0 
-70 
164 
116 ]def
/Encoding [
2 nND
/a2 
1 nND
/a4 
1 nND
/a6 
1 nND
/a8 /a9 /a10 
1 nND
/a12 
1 nND
/a14 
1 nND
/a16 
1 nND
/a18 
3 nND
/a22 
1 nND
/a24 
1 nND
/a26 /a27 
1 nND
/a29 
3 nND
/a33 
2 nND
/a36 /a37 
3 nND
/a41 /a42 
3 nND
/a46 
3 nND
/a50 
3 nND
/a54 
2 nND
/a57 
3 nND
/a61 
2 nND
/a64 
1 nND
/a66 
2 nND
/a69 /a70 
2 nND
/a73 
2 nND
/a76 /a77 
2 nND
/a80 
1 nND
/a82 
1 nND
/a84 /a85 /a86 /a87 /a88 /a89 /a90 /a91 
1 nND
/a93 
1 nND
/a95 
2 nND
/a98 
12 nND
/a111 
1 nND
/a113 
3 nND
/a117 /a118 
2 nND
/a121 
10 nND
/a132 
7 nND
/a140 
9 nND
/a150 /a151 /a152 /a153 /a154 /a155 /a156 
1 nND
/a158 
1 nND
/a160 /a161 /a162 /a163 /a164 /a165 /a166 /a167 /a168 /a169 /a170 /a171 /a172 
/a173 /a174 /a175 /a176 /a177 /a178 
1 nND
/a180 /a181 /a182 /a183 /a184 /a185 /a186 /a187 
1 nND
/a189 /a190 /a191 /a192 
2 nND
/a195 
1 nND
/a197 /a198 
2 nND
/a201 /a202 /a203 /a204 
3 nND
/a208 /a209 /a210 
1 nND
/a212 /a213 /a214 /a215 /a216 /a217 
2 nND
/a220 
35 nND] def
/GlyphProcs 109 dict begin
/.notdef {250 0 d0} bind def
/a2 {{
57 0 0 0 0 0 setcachedevice
} exec } bind def
/a4 {{
56 0 0 0 0 0 setcachedevice
} exec } bind def
/a6 {{
78 0 0 0 0 0 setcachedevice
} exec } bind def
/a8 {{
44 0 0 0 0 0 setcachedevice
} exec } bind def
/a9 {{
58 0 0 0 0 0 setcachedevice
} exec } bind def
/a10 {{
50 0 0 0 0 0 setcachedevice
} exec } bind def
/a12 {{
65 0 0 0 0 0 setcachedevice
} exec } bind def
/a14 {{
52 0 0 0 0 0 setcachedevice
} exec } bind def
/a16 {{
63 0 0 0 0 0 setcachedevice
} exec } bind def
/a18 {{
51 0 0 0 0 0 setcachedevice
} exec } bind def
/a22 {{
72 0 0 0 0 0 setcachedevice
} exec } bind def
/a24 {{
33 0 0 0 0 0 setcachedevice
} exec } bind def
/a26 {{
70 0 0 0 0 0 setcachedevice
} exec } bind def
/a27 {{
76 0 0 0 0 0 setcachedevice
} exec } bind def
/a29 {{
54 0 0 0 0 0 setcachedevice
} exec } bind def
/a33 {{
55 0 0 0 0 0 setcachedevice
} exec } bind def
/a36 {{
53 0 0 0 0 0 setcachedevice
} exec } bind def
/a37 {{
60 0 0 0 0 0 setcachedevice
} exec } bind def
/a41 {{
67 0 0 0 0 0 setcachedevice
} exec } bind def
/a42 {{
36 0 0 0 0 0 setcachedevice
} exec } bind def
/a46 {{
81 0 0 0 0 0 setcachedevice
} exec } bind def
/a50 {{
88 0 0 0 0 0 setcachedevice
} exec } bind def
/a54 {{
45 0 0 0 0 0 setcachedevice
} exec } bind def
/a57 {{
85 0 0 0 0 0 setcachedevice
} exec } bind def
/a61 {{
122 0 0 0 0 0 setcachedevice
} exec } bind def
/a64 {{
92 0 0 0 0 0 setcachedevice
} exec } bind def
/a66 {{
93 0 0 0 0 0 setcachedevice
} exec } bind def
/a69 {{
69 0 0 0 0 0 setcachedevice
} exec } bind def
/a70 {{
87 0 0 0 0 0 setcachedevice
} exec } bind def
/a73 {{
82 0 0 0 0 0 setcachedevice
} exec } bind def
/a76 {{
98 0 0 0 0 0 setcachedevice
} exec } bind def
/a77 {{
94 0 0 0 0 0 setcachedevice
} exec } bind def
/a80 {{
91 0 0 0 0 0 setcachedevice
} exec } bind def
/a82 {{
79 0 0 0 0 0 setcachedevice
} exec } bind def
/a84 {{
48 0 0 0 0 0 setcachedevice
} exec } bind def
/a85 {{
43 0 0 0 0 0 setcachedevice
} exec } bind def
/a86 {{
77 0 0 0 0 0 setcachedevice
} exec } bind def
/a87 {{
113 0 0 0 0 0 setcachedevice
} exec } bind def
/a88 {{
80 0 0 0 0 0 setcachedevice
} exec } bind def
/a89 {{
68 0 0 0 0 0 setcachedevice
} exec } bind def
/a90 {{
103 0 0 0 0 0 setcachedevice
} exec } bind def
/a91 {{
75 0 0 0 0 0 setcachedevice
} exec } bind def
/a93 {{
117 0 0 0 0 0 setcachedevice
} exec } bind def
/a95 {{
86 0 0 0 0 0 setcachedevice
} exec } bind def
/a98 {{
106 0 0 0 0 0 setcachedevice
} exec } bind def
/a111 {{
108 0 0 0 0 0 setcachedevice
} exec } bind def
/a113 {{
46 0 0 0 0 0 setcachedevice
} exec } bind def
/a117 {{
41 0 0 0 0 0 setcachedevice
} exec } bind def
/a118 {{
89 0 0 0 0 0 setcachedevice
} exec } bind def
/a121 {{
34 0 0 0 0 0 setcachedevice
} exec } bind def
/a132 {{
40 0 0 0 0 0 setcachedevice
} exec } bind def
/a140 {{
39 0 0 0 0 0 setcachedevice
} exec } bind def
/a150 {{
0 0 0 0 75 77 setcachedevice
75.0 0.0 0.0 77.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 75 def
/Height 77 def
/ImageMatrix [75.0 0.0 0.0 -77.0 0.0 77.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<0000007FFFF0000000000000007FFFF0000000000000007FFFF000000000FF00
0FFFFFFFE0003FE0FF000FFFFFFFE0003FE0FFC03FFFFFFFF801FFE0FFC03FFF
FFFFF801FFE0FFC03FFFFFFFF801FFE0FFF1FFFFFFFFF801FFE0FFF1FFFFFFFF
F801FFE0FFFE3FFFFFFFE007FFE0FFFE3FFFFFFFE007FFE0FFFE3FFFFFFFE007
FFE0FFFE3FFFFFFFE007FFE0FFFE3FFFFFFFE007FFE0FFFE3FFFFFFFE007FFE0
FFFE3FFFFFFFE007FFE0FFFF8FFFFFFF003FFFE0FFFF8FFFFFFF003FFFE0FFFF
8FFFFFFF003FFFE0FFFF8FFFFFFF003FFFE0FFFF8FFFFFFF003FFFE0FFFF8FFF
FFFF003FFFE0FFFF8FFFFFFF003FFFE0FFFFF000000000FFFFE0FFFFF0000000
00FFFFE0FFFFF000000000FFFFE0FFFFF3FFFFFC00FFFFE0FFFFF3FFFFFC00FF
FFE0FFFFF3FFFFFC00FFFFE0FFFFF3FFFFFC00FFFFE0FFFFF07FFFF000FFFFE0
FFFFFC7FFFF003FFFFE0FFFFFC7FFFF003FFFFE0FFFFFC7FFFF003FFFFE0FFFF
FC7FFFF003FFFFE0FFFFFC7FFFF003FFFFE0FFFFFC7FFFF003FFFFE0FFFFFC1F
FF8003FFFFE0FFFFFF1FFF801FFFFFE0FFFFFF1FFF801FFFFFE0FFFFFF1FFF80
1FFFFFE0FFFFFF1FFF801FFFFFE0FFFFFF1FFF801FFFFFE0FFFFFF1FFF801FFF
FFE0FFFFFF1FFF801FFFFFE0FFFFFFE3FE007FFFFFE0FFFFFFE3FE007FFFFFE0
FFFFFFE3FE007FFFFFE0FFFFFFE3FE007FFFFFE0FFFFFFE3FE007FFFFFE0FFFF
FFE3FE007FFFFFE0FFFFFFE3FE007FFFFFE0FFFFFFF8F003FFFFFFE0FFFFFFF8
F003FFFFFFE0FFFFFFF8F003FFFFFFE0FFFFFFF8F003FFFFFFE0FFFFFFF8F003
FFFFFFE0FFFFFFF8F003FFFFFFE0FFFFFFF8F003FFFFFFE0FFFFFFFF000FFFFF
FFE0FFFFFFFF000FFFFFFFE0FFFFFFFF000FFFFFFFE0FFFFFFFF000FFFFFFFE0
FFFFFFFF000FFFFFFFE0FFFFFFFF000FFFFFFFE0FFFFFFFF000FFFFFFFE0FFFF
FFFF000FFFFFFFE0FFFFFFFFC03FFFFFFFE0FFFFFFFFC03FFFFFFFE0FFFFFFFF
C03FFFFFFFE0FFFFFFFFC03FFFFFFFE0FFFFFFFFC03FFFFFFFE0FFFFFFFFC03F
FFFFFFE0FFFFFFFFC03FFFFFFFE0FFFFFFFFF1FFFFFFFFE0FFFFFFFFF1FFFFFF
FFE0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
75 77 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a151 {{
0 0 0 29 54 77 setcachedevice
54.0 0.0 0.0 48.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 54 def
/Height 48 def
/ImageMatrix [54.0 0.0 0.0 -48.0 0.0 48.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFF8003F00000FFFF8003F00000FFFE0000300000FFFE0FF8300FFCFFFE0FF8
300FFCFFF03FFFC00FFCFFF03FFFC00FFCFFC03FFFC00FFCFFC03FFFC00FFCFF
C03FFFC00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF0
0FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC0
3FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00F
FCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03F
FFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFC
FFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFF
F00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFF
C03FFFF00FFCFFC03FFFF00FFC00003FE0000FFC00003FE0000FFC00003FE000
0FFCFFC03FFFF00FFCFFC03FFFF00FFC>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
54 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a152 {{
0 0 0 26 49 101 setcachedevice
49.0 0.0 0.0 75.0 0.0 26.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 49 def
/Height 75 def
/ImageMatrix [49.0 0.0 0.0 -75.0 0.0 75.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFE00003FFF80FFFE00003FFF80FF000000003F80FF01FFFFC03F80FF01FFFF
C03F80F83FFFFFFE0F80F83FFFFFFE0F80E03FFFFFFE0380E0FFFFFFFF8380E0
FFFFFFFF838003FFFFFFFFF00003FFFFFFFFF00003FFFFFFFFF00003FFFFFFFF
F00003FFFFFFFFF00003FFFFFFFFF00003FFFFFFFFF00003FFFFFFFFF00003FF
FFFFFFF00000FFFFFFFF8000E0FFFFFFFF8000E0FFFFFFFF8000F83FFFFFF003
80F83FFFFFF00380FFC00000000F80FFC00000000F80FF000000000F80FF0000
00003F80FF000000003F80F800000007FF80F800000007FF80F800000007FF80
F83FFFFFFFFF80F83FFFFFFFFF80F83FFFFFFFFF80F83FFFFFFFFF80F8FFFFFF
FFFF80F8FFFFFFFFFF80F8FFFFFFFFFF80F8FFFFFFFFFF80F8FFFFFFFFFF80F8
3E001FFFFF80F83E001FFFFF80F8000000FFFF80FF003F00FFFF80FF003F00FF
FF80FF01FFE03FFF80FF01FFE03FFF80F807FFF807FF80F807FFF807FF80E007
FFF801FF80E007FFF801FF80E007FFF801FF80E007FFF801FF80E007FFF801FF
80E007FFF801FF80E007FFF801FF80E007FFF801FF80E007FFF801FF80E007FF
F801FF80E007FFF801FF80E007FFF801FF80E007FFF801FF80F807FFF807FF80
F807FFF807FF80FF01FFE03FF000FF01FFE03FF000FF003F003FF000FFC03F00
3FF000FFC03F003FF000FFFE001FC1F000FFFE001FC1F000FFFFFFFFFE0380FF
FFFFFFFE0380FFFFFFFFFE0380>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
49 75 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a153 {{
0 0 0 29 32 77 setcachedevice
32.0 0.0 0.0 48.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 32 def
/Height 48 def
/ImageMatrix [32.0 0.0 0.0 -48.0 0.0 48.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<8FC001FF8FC001FF8300000F831FFC0F831FFC0F80FFFF8380FFFF8380FFFF80
83FFFFE083FFFFE083FFFFE083FFFFE08FFFFFE08FFFFFE08FFFFFE08FFFFFE0
8FFFFFE08FFFFF808FFFFF808FFFFC00FFFFFC03FFFFFC03FFC00003FFC00003
FC00000FFC00000FE000000FE00001FFE00001FFE007FFFFE007FFFF8007FFFF
80FFFFFF80FFFFFF83FFFFE383FFFFE383FFFFE383FFFFE383FFFFE383FFFFE3
83FFFFE3E3FFFF83E3FFFF83E01FFC03FC1FFC03FC1FFC03FF0001E3FF0001E3
>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
32 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a154 {{
62 0 0 0 0 0 setcachedevice
} exec } bind def
/a155 {{
0 0 0 9 32 77 setcachedevice
32.0 0.0 0.0 68.0 0.0 9.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 32 def
/Height 68 def
/ImageMatrix [32.0 0.0 0.0 -68.0 0.0 68.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFF801FFFFF801FFFFE0003FFFE0FE3FFFE0FE3FFF03FE3FFF03FE3FFC03FE0
FFC03FF8FFC03FF8FFC03FF8FFC03FF8FFC03FF8FFC03FF8FFC03FF8FFC03FF8
FFC03FF8FFC03FF8FFC03FF8FFC03FF8FFC03FFFFFC03FFFFFC03FFFFFC03FFF
FFC03FFFFFC03FFFFFC03FFFFFC03FFFFFC03FFFFFC03FFFFFC03FFFFFC03FFF
FFC03FFFFFC03FFFFFC03FFFFFC03FFFFFC03FFFFFC03FFFFFC03FFFFFC03FFF
FFC03FFFFFC03FFFFFC03FFFFFC03FFFFFC03FFFFFC03FFF0000000000000000
F8003FFFF8003FFFF8003FFFFFC03FFFFFC03FFFFFC03FFFFFC03FFFFFC03FFF
FFF03FFFFFF03FFFFFF03FFFFFF03FFFFFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFF
FFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
32 68 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a156 {{
0 0 0 5 37 77 setcachedevice
37.0 0.0 0.0 72.0 0.0 5.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 37 def
/Height 72 def
/ImageMatrix [37.0 0.0 0.0 -72.0 0.0 72.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<800000000080000000008000000000FFF8007FF8FFF8007FF8FFFE01FFF8FFFE
01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FF
F8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FF
FE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01
FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8
FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE
01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FF
F8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FF
FE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01
FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8FFFE01FFF8801E01FFF8801E01FFF8
801E01FFF8FFC001FFF8FFC001FFF8FFC001FFF8FFFE01FFF8FFFE01FFF8FFFF
81FFF8FFFF81FFF8>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
37 72 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a158 {{
0 0 0 65 15 99 setcachedevice
15.0 0.0 0.0 34.0 0.0 65.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 15 def
/Height 34 def
/ImageMatrix [14.999999 0.0 0.0 -34.0 0.0 34.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<E3FEE3FEE3FEF8FEF8FEF81EFF1EFF1EFF1EFF1EFFC6FFC6FFC6FFC6FFC6FFF8
FFF8FFF8FFF8FFF8FFF8FFF8E018E01880008000800080008000800080068006
E01EE01E>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
15 34 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a160 {{
0 0 0 5 44 79 setcachedevice
44.0 0.0 0.0 74.0 0.0 5.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 44 def
/Height 74 def
/ImageMatrix [44.0 0.0 0.0 -74.0 0.0 74.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFE000FFFF0FFFE000FFFF0FFC0FF80FFF0FFC0FF80FFF0FF00FF8007F0FF1F
FFFC07F0FF1FFFFC07F0FCFFFFFF07F0FCFFFFFF07F0E0FFFFFF00F0E3FFFFFF
00F0E3FFFFFF00F0E3FFFFFFC030E3FFFFFFC03080FFFFFFC03080FFFFFFC030
801FFFFFC000801FFFFFC000801FFFFFC000801FFFFFC000801FFFFFC000801F
FFFFC000E01FFFFFC000E01FFFFFC000FFFFFFFFC000FFFFFFFFC000FFFFFFFF
C000FFFFFFFFC000FFFFFFFFC000FFFFFFFFC000FFFFFFFFC000FFFFFFFFC030
FFFFFFFFC030FFFFFFFFC030FFFFFFFFC030FFFFFFFFC030FF1FFFFF0030FF1F
FFFF0030FF1FFFFF00F0FF1FFFFF00F0FF07FFFC00F0FF07FFFC07F0FF07FFFC
07F0FF183FE01FF0FF183FE01FF0FF1800001FF0FF1FC003FFF0FF1FC003FFF0
FF1FFFFFFFF0FF1FFFFFFFF0FF1FFFFFFFF0FF1FFFFFFFF0FF1FFFFFFFF0FF1F
FFFFFFF0FF1FFFFFFFF0FF1FFFFFFFF0FF1FFFFFFFF0FF1FFFFFFFF0FF1FFFFF
FFF0FF1FFFFFFFF0FF1FFFFFFFF0FF1FFFFFFFF0FF00000FFFF0FF00000FFFF0
FF000000FFF0FF000000FFF0FF000000FFF0FF0000001FF0FF0000001FF0FF00
000007F0FF00000007F0FF00000007F0FF07FFFFC0F0FF07FFFFC0F0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
44 74 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a161 {{
0 0 0 0 68 75 setcachedevice
68.0 0.0 0.0 75.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 68 def
/Height 75 def
/ImageMatrix [68.0 0.0 0.0 -75.0 0.0 75.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFF80000000000FFF0FFF80000000000FFF0FFF80000000000FFF0FFFFFFE000
3FFFFFF0FFFFFFE0003FFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FF
FFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FF
FFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFF
FFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFF
FFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFF
FC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFF
F0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC
00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0
FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00
FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FF
FFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FF
FFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFF
FFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFFFFF0FFFFFFFC00FFFF
FFF08FFFFFFC00FFFFFFC08FFFFFFC00FFFFFFC08FFFFFFC00FFFFFFC08FFFFF
FC00FFFFFFC08FFFFFFC00FFFFFFC08FFFFFFC00FFFFFFC08FFFFFFC00FFFFFF
C08FFFFFFC00FFFFFFC08FFFFFFC00FFFFFFC08FFFFFFC00FFFFFFC083FFFFFC
00FFFFFE0083FFFFFC00FFFFFE0083FFFFFC00FFFFFE00E3FFFFFC00FFFFFE30
E3FFFFFC00FFFFFE30E3FFFFFC00FFFFFE30E3FFFFFC00FFFFFE30E0FFFFFC00
FFFFF830E0FFFFFC00FFFFF830E0FFFFFC00FFFFF830E007FFFC00FFFF0030E0
07FFFC00FFFF0030E00000000000000030E00000000000000030E00000000000
000030>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
68 75 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a162 {{
0 0 0 -2 54 75 setcachedevice
54.0 0.0 0.0 77.0 0.0 -2.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 54 def
/Height 77 def
/ImageMatrix [54.0 0.0 0.0 -77.0 0.0 77.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<0000001F0000000000001F0000000000001F000000FFC03FFFF00FFCFFC03FFF
F00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFF
C03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF0
0FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC0
3FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00F
FCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03F
FFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFC
FFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC00FFF
F00FFCFFC00FFFF00FFCFFC00FFFF00FFCFFC00FFFF00FFCFFC00FFFF00FFCFF
C033FFF03FFCFFC033FFF03FFCFFC0307FC03FFCFFC03C7FC1FFFCFFC03C7FC1
FFFCFFC03F0007FFFCFFC03F0007FFFCFFC03FFFFFFFFCFFC03FFFFFFFFCFFC0
3FFFFFFFFCFFC03FFFFFFFFCFFC03FFFFFFFFCFFC03FFFFFFFFCFFC03FFFFFFF
FCFFC03FFFFFFFFCFFC03FFFFFFFFCFFC03FFFFFFFFCFFC03FFFFFFFFCFFC03F
FFFFFFFCFFC03FFFFFFFFCFFC03FFFFFFFFCFFC03FFFFFFFFCFFC03FFFFFFFFC
FFC03FFFFFFFFCFFC03FFFFFFFFCFFC03FFFFFFFFCFFC03FFFFFFFFCFFC03FFF
FFFFFCFFC03FFFFFFFFCFFC03FFFFFFFFCFFC03FFFFFFFFC00003FFFFFFFFC00
003FFFFFFFFC00003FFFFFFFFCFFC03FFFFFFFFCFFC03FFFFFFFFC>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
54 77 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a163 {{
0 0 0 0 24 75 setcachedevice
24.0 0.0 0.0 75.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 24 def
/Height 75 def
/ImageMatrix [24.0 0.0 0.0 -75.0 0.0 75.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<000000000000000000FFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC0
7FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFF
C07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07F
FFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC07FFFC0
7FC0007FC0007FC0007FFFC07FFFC07FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE01FFFE01FF
FE01FFF8007FF8007FF8007FF8007FF8007FF8007FF8007FFE01FFFE01FFFE01
FF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
24 75 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a164 {{
0 0 0 29 51 99 setcachedevice
51.0 0.0 0.0 70.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 51 def
/Height 70 def
/ImageMatrix [51.0 0.0 0.0 -70.0 0.0 70.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<0000001FFFFFE00000001FFFFFE00000001FFFFFE0FFC03FFFFFFFE0FFC03FFF
FFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FF
C03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFF
FFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC0
3FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03F0007FF
E0FFC03F0007FFE0FFC0300001FFE0FFC0307FC1FFE0FFC0307FC1FFE0FFC00F
FFF00FE0FFC00FFFF00FE0FFC00FFFF003E0FFC00FFFF003E0FFC00FFFF003E0
FFC03FFFFE03E0FFC03FFFFE03E0FFC03FFFFE0060FFC03FFFFE0060FFC03FFF
FE0060FFC03FFFFF8060FFC03FFFFF8060FFC03FFFFF8000FFC03FFFFF8000FF
C03FFFFF8000FFC03FFFFF8000FFC03FFFFF8000FFC03FFFFF8000FFC03FFFFF
8000FFC03FFFFF8000FFC03FFFFF8000FFC03FFFFF8000FFC03FFFFF8000FFC0
3FFFFF8000FFC03FFFFF8000FFC03FFFFF8000FFC03FFFFF8000FFC03FFFFF80
60FFC03FFFFF8060FFC03FFFFE0060FFC03FFFFE0060FFC03FFFFE03E0FFC03F
FFFE03E0FFC00FFFFE03E0FFC00FFFFE03E0FFC00FFFFE03E0FFC00FFFF00FE0
FFC00FFFF00FE00000007FC00FE00000307FC03FE00000307FC03FE0FFC03F00
07FFE0FFC03F0007FFE0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
51 70 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a165 {{
0 0 0 29 49 77 setcachedevice
49.0 0.0 0.0 48.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 49 def
/Height 48 def
/ImageMatrix [49.0 0.0 0.0 -48.0 0.0 48.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFC001FFC00F80FFC001FFC00F80FC00000F000180FC07FC0F00F180FC07FC0F
00F180E007FFE007FC00E007FFE007FC008007FFE007FC00801FFFE007FC0080
1FFFE007FC00801FFFFC07FC00801FFFFC07FC00801FFFFC07FC00801FFFFC07
FC00801FFFFC07FC00801FFFFC07FC00801FFFFC07FC00E007FFFC07FF80E007
FFFC07FF80E007FFFC07FF80FC07FFFC07FF80FC07FFFC07FF80FF003FFC07FF
80FF003FFC07FF80FFF801FC07FF80FFF801FC07FF80FFF8000007FF80FFFFF0
0007FF80FFFFF00007FF80FFFFFFFC07FF80FFFFFFFC07FF80FFFFFFFC07FF80
FFFFFFFC07FF80FFFFFFFC07FF80FFFFFFFC07FF80FFFFFFFC07FF80FC1FFFFC
07FF80FC1FFFFC07FF80E007FFE007FF80E007FFE01FFF80E007FFE01FFF80E0
07FFE0FFFF80E007FFE0FFFF80E007FF80FFFF80FC1FFF83FFFF80FC1FFF83FF
FF80FF00000FFFFF80FF00000FFFFF80>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
49 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a166 {{
0 0 0 29 42 77 setcachedevice
42.0 0.0 0.0 48.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 42 def
/Height 48 def
/ImageMatrix [42.0 0.0 0.0 -47.999996 0.0 47.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFF8000FFC0FFFF8000FFC0FFF0000007C0FFF00FFF07C0FFF00FFF07C0FFC1
FFFFF1C0FFC1FFFFF1C0FF01FFFFF000FF07FFFFFE00FF07FFFFFE00F807FFFF
FE00F807FFFFFE00E03FFFFFFFC0E03FFFFFFFC0E03FFFFFFFC0E03FFFFFFFC0
E03FFFFFFFC0003FFFFFFFC0003FFFFFFFC0003FFFFFFFC0003FFFFFFFC0003F
FFFFFFC0003FFFFFFFC0003FFFFFFFC000000000000000000000000000000000
0000003FFFFFC000003FFFFFC000003FFFFFC000003FFFFFC000003FFFFFC000
E03FFFFFC000E03FFFFFC000E03FFFFF01C0E03FFFFF01C0F807FFFF01C0F807
FFFF01C0F807FFFF01C0F807FFFF01C0F807FFFF01C0FF01FFF807C0FF01FFF8
07C0FF003FE007C0FFC03FE03FC0FFC03FE03FC0FFFE0003FFC0FFFE0003FFC0
>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
42 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a167 {{
0 0 0 29 37 77 setcachedevice
37.0 0.0 0.0 48.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 37 def
/Height 48 def
/ImageMatrix [37.0 0.0 0.0 -47.999996 0.0 47.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<0000001FF80000001FF80000001FF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC0
3FFFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC03FFF
F8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FF
C03FFFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC03F
FFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8
FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC03FFFF8FFC00FF838FFC00FF838FFC0
0FE000FFC00FE000FFC00FE000FFC00FE000FFC00FE000000003E000000033F8
38000033F838FFC03C00F8FFC03C00F8>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
37 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a168 {{
84 0 0 0 0 0 setcachedevice
} exec } bind def
/a169 {{
42 0 0 0 0 0 setcachedevice
} exec } bind def
/a170 {{
0 0 0 29 54 77 setcachedevice
54.0 0.0 0.0 48.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 54 def
/Height 48 def
/ImageMatrix [54.0 0.0 0.0 -48.0 0.0 48.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<0000001F0000000000001F0000000000001F000000FFC03FFFF00FFCFFC03FFF
F00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFF
C03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF0
0FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC0
3FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00F
FCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03F
FFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFC
FFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC03FFFF00FFCFFC00FFF
F00FFCFFC00FFFF00FFCFFC00FFFF00FFCFFC00FFFF00FFCFFC00FFFF00FFCFF
C033FFF03FFCFFC033FFF03FFC0000307FC03FFC00003C7FC1FFFC00003C7FC1
FFFCFFC03F0007FFFCFFC03F0007FFFC>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
54 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a171 {{
0 0 0 29 49 77 setcachedevice
49.0 0.0 0.0 48.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 49 def
/Height 48 def
/ImageMatrix [49.0 0.0 0.0 -48.0 0.0 48.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFF8000FFFF80FFFF8000FFFF80FFF0000007FF80FFF00FF807FF80FFF00FF8
07FF80FF01FFFFC03F80FF01FFFFC03F80F801FFFFC00F80F807FFFFF00F80F8
07FFFFF00F80F807FFFFF00F80F807FFFFF00F80E03FFFFFFE0380E03FFFFFFE
0380E03FFFFFFE0380E03FFFFFFE0380E03FFFFFFE0380003FFFFFFE0000003F
FFFFFE0000003FFFFFFE0000003FFFFFFE0000003FFFFFFE0000003FFFFFFE00
00003FFFFFFE0000003FFFFFFE0000003FFFFFFE0000003FFFFFFE0000003FFF
FFFE0000003FFFFFFE0000003FFFFFFE0000003FFFFFFE0000003FFFFFFE0000
E03FFFFFFE0380E03FFFFFFE0380E03FFFFFFE0380E03FFFFFFE0380F807FFFF
F00F80F807FFFFF00F80F807FFFFF00F80F807FFFFF00F80F807FFFFF00F80FF
01FFFFC03F80FF01FFFFC03F80FF000FF8003F80FFF00FF807FF80FFF00FF807
FF80FFFF8000FFFF80FFFF8000FFFF80>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
49 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a172 {{
0 0 0 0 27 77 setcachedevice
27.0 0.0 0.0 77.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 27 def
/Height 77 def
/ImageMatrix [27.0 0.0 0.0 -77.0 0.0 77.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<000000000000000000000000FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0
FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0
FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0
FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0
FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0
FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0
FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0
FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0
FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0FFC07FE0
00007FE000007FE000007FE0FFC07FE0FFC07FE0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
27 77 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a173 {{
0 0 0 0 52 77 setcachedevice
52.0 0.0 0.0 77.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 52 def
/Height 77 def
/ImageMatrix [51.999996 0.0 0.0 -77.0 0.0 77.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFE000FC00000FFFE000FC00000FFC00000C00000FFC03FE0C03FF0FFC03FE0
C03FF0FF00FFFF003FF0FF00FFFF003FF0FC00FFFF003FF0FC07FFFF003FF0FC
07FFFF003FF0FC07FFFFC03FF0FC07FFFFC03FF0E01FFFFFC03FF0E01FFFFFC0
3FF0E01FFFFFC03FF0E01FFFFFC03FF0E01FFFFFC03FF0801FFFFFC03FF0801F
FFFFC03FF0801FFFFFC03FF0801FFFFFC03FF0801FFFFFC03FF0801FFFFFC03F
F0801FFFFFC03FF0801FFFFFC03FF0801FFFFFC03FF0801FFFFFC03FF0801FFF
FFC03FF0801FFFFFC03FF0801FFFFFC03FF0801FFFFFC03FF0801FFFFFC03FF0
E01FFFFFC03FF0E01FFFFFC03FF0E01FFFFFC03FF0E01FFFFFC03FF0FC07FFFF
C03FF0FC07FFFFC03FF0FC07FFFFC03FF0FC07FFFFC03FF0FC07FFFFC03FF0FF
00FFFF003FF0FF00FFFF003FF0FF003FE0003FF0FFF83FE0C03FF0FFF83FE0C0
3FF0FFFE000FC03FF0FFFE000FC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFF
FFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03F
F0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFF
FFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0
FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFF
C03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFF80003FF0FF
FFFF80003FF0FFFFFF80003FF0FFFFFFFFC03FF0FFFFFFFFC03FF0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
52 77 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a174 {{
0 0 0 29 40 77 setcachedevice
40.0 0.0 0.0 48.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 40 def
/Height 48 def
/ImageMatrix [40.0 0.0 0.0 -47.999996 0.0 47.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFE0003FFFFFE0003FFFFC000001FFFC03FFC1FFFC03FFC1FFF00FFFFC7FF00
FFFFC7FC00FFFFC0FC07FFFFF8FC07FFFFF8FC07FFFFF8FC07FFFFF8E01FFFFF
FFE01FFFFFFFE01FFFFFFFE01FFFFFFFE01FFFFFFF801FFFFFFF801FFFFFFF80
1FFFFFFF801FFFFFFF801FFFFFFF801FFFFFFF801FFFFFFF801FFFFFFF801FFF
FFFF801FFFFFFF801FFFFFFF801FFFFFFF801FFFFFFF801FFFFFFF801FFFFFFF
E01FFFFFFFE01FFFFFFFE01FFFFFFFE01FFFFFFFFC07FFFC1FFC07FFFC1FFC07
FFE007FC07FFE007FC07FFE007FF00FFE007FF00FFE007FF003FE007FFC03FFC
1FFFC03FFC1FFFFE0000FFFFFE0000FF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
40 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a175 {{
101 0 0 0 0 0 setcachedevice
} exec } bind def
/a176 {{
31 0 0 0 0 0 setcachedevice
} exec } bind def
/a177 {{
0 0 0 0 39 77 setcachedevice
39.0 0.0 0.0 77.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 39 def
/Height 77 def
/ImageMatrix [39.0 0.0 0.0 -77.0 0.0 77.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<C0000007FEC0000007FEC0000007FEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF0
0FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFF
FEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFF
F00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00F
FFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFE
FFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF0
0FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFF
FEFFF00FFFFE00000007FE00000007FEFFF00FFFFEFFF00FFFFEFFF00FFFFEFF
F00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00F
FFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFEFFF00FFFFE
FFF00FFFFEFFF00FFE0EFFF00FFE0EFFF003F800FFFC03F800FFFC03F800FFFF
83F800FFFF83F800FFFFE0FE0EFFFFE0FE0EFFFFE0000EFFFFFC003EFFFFFC00
3E>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
39 77 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a178 {{
0 0 0 0 51 77 setcachedevice
51.0 0.0 0.0 77.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 51 def
/Height 77 def
/ImageMatrix [51.0 0.0 0.0 -77.0 0.0 77.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFC7FF0007FFE0FFC7FF0007FFE0FFC1F00001FFE0FFC1F07FC1FFE0FFC1F07F
C1FFE0FFC18FFFF00FE0FFC18FFFF00FE0FFC00FFFF003E0FFC00FFFFE03E0FF
C00FFFFE03E0FFC03FFFFE03E0FFC03FFFFE03E0FFC03FFFFF8060FFC03FFFFF
8060FFC03FFFFF8060FFC03FFFFF8060FFC03FFFFF8060FFC03FFFFF8000FFC0
3FFFFF8000FFC03FFFFF8000FFC03FFFFF8000FFC03FFFFF8000FFC03FFFFF80
00FFC03FFFFF8000FFC03FFFFF8000FFC03FFFFF8000FFC03FFFFF8000FFC03F
FFFF8000FFC03FFFFF8000FFC03FFFFF8000FFC03FFFFF8000FFC03FFFFF8000
FFC03FFFFF8060FFC03FFFFF8060FFC03FFFFF8060FFC03FFFFF8060FFC03FFF
FE03E0FFC03FFFFE03E0FFC00FFFFE03E0FFC00FFFFE03E0FFC00FFFFE03E0FF
C00FFFF00FE0FFC00FFFF00FE0FFC0007FC00FE0FFC0307FC03FE0FFC0307FC0
3FE0FFC03F0007FFE0FFC03F0007FFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC0
3FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFF
E0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03F
FFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0
FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFF
FFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE000003FFFFFFFE000
003FFFFFFFE000003FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
51 77 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a180 {{
0 0 0 65 13 77 setcachedevice
13.0 0.0 0.0 12.0 0.0 65.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 13 def
/Height 12 def
/ImageMatrix [12.999999 0.0 0.0 -11.999999 0.0 11.999999]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<E018E01880008000800080008000800080008000E018E018>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
13 12 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a181 {{
0 0 0 2 64 77 setcachedevice
64.0 0.0 0.0 75.0 0.0 2.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 64 def
/Height 75 def
/ImageMatrix [64.0 0.0 0.0 -75.0 0.0 75.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<8000000000007FFF8000000000007FFF80000000000003FFFFC001FFFFF003FF
FFC001FFFFF003FFFFF801FFFFFC001FFFF801FFFFFC001FFFF801FFFFFC001F
FFF801FFFFFF801FFFF801FFFFFF801FFFF801FFFFFF8007FFF801FFFFFF8007
FFF801FFFFFFE007FFF801FFFFFFE007FFF801FFFFFFE000FFF801FFFFFFE000
FFF801FFFFFFE000FFF801FFFFFFE000FFF801FFFFFFE000FFF801FFFFFFE000
FFF801FFFFFFE000FFF801FFFFFFE000FFF801FFFFFFE000FFF801FFFFFFE000
FFF801FFFFFFE000FFF801FFFFFFE000FFF801FFFFFFE000FFF801FFFFFFE007
FFF801FFFFFFE007FFF801FFFFFF8007FFF801FFFFFF8007FFF801FFFFFF8007
FFF801FFFFFF801FFFF801FFFFFF801FFFF801FFFFFC00FFFFF801FFFFFC00FF
FFF801FFFFF003FFFFF801FFFFF003FFFFF80000000003FFFFF8000000007FFF
FFF8000000007FFFFFF801FFFFF003FFFFF801FFFFF003FFFFF801FFFFF000FF
FFF801FFFFFC00FFFFF801FFFFFC00FFFFF801FFFFFC001FFFF801FFFFFC001F
FFF801FFFFFF801FFFF801FFFFFF801FFFF801FFFFFF8007FFF801FFFFFF8007
FFF801FFFFFF8007FFF801FFFFFF8007FFF801FFFFFF8007FFF801FFFFFF8007
FFF801FFFFFF8007FFF801FFFFFF8007FFF801FFFFFF8007FFF801FFFFFF8007
FFF801FFFFFF8007FFF801FFFFFF8007FFF801FFFFFF8007FFF801FFFFFF801F
FFF801FFFFFF801FFFF801FFFFFC001FFFF801FFFFFC001FFFF801FFFFFC001F
FFF801FFFFFC00FFFFF801FFFFFC00FFFFC001FFFFF00FFFFFC001FFFFF00FFF
800000000001FFFF800000000001FFFF800000000001FFFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
64 75 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a182 {{
74 0 0 0 0 0 setcachedevice
} exec } bind def
/a183 {{
0 0 0 29 51 99 setcachedevice
51.0 0.0 0.0 70.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 51 def
/Height 70 def
/ImageMatrix [51.0 0.0 0.0 -70.0 0.0 70.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<F801FFFFFFFFE0F801FFFFFFFFE0F801FFFFFFFFE0E0FE3FFFFFFFE0E0FE3FFF
FFFFE0003E0FFFFFFFE0003F8FFFFFFFE0003F8FFFFFFFE0003FF3FFFFFFE000
3FF3FFFFFFE0003FF3FFFFFFE0003FF3FFFFFFE0003FF07FFFFFE0FFFFFC7FFF
FFE0FFFFFC7FFFFFE0FFFFFC7FFFFFE0FFFFFC7FFFFFE0FFFFFC7FFFFFE0FFFF
FC7FFFFFE0FFFFFC7FFFFFE0FFFFFF1FFFFFE0FFFFFF1FFFFFE0FFFFFF1FFFFF
E0FFFFFF1FFFFFE0FFFFFC03FFFFE0FFFFFC03FFFFE0FFFFFC03FFFFE0FFFFFC
03FFFFE0FFFFFC03FFFFE0FFFFFC03FFFFE0FFFFFC03FFFFE0FFFFFC03FFFFE0
FFFFF018FFFFE0FFFFF018FFFFE0FFFFF018FFFFE0FFFFF018FFFFE0FFFF8018
3FFFE0FFFF80183FFFE0FFFF80183FFFE0FFFF807F3FFFE0FFFF807F3FFFE0FF
FF807F3FFFE0FFFF807F3FFFE0FFFF807F3FFFE0FFFE03FFC7FFE0FFFE03FFC7
FFE0FFFE03FFC7FFE0FFFE03FFC7FFE0FFFE03FFC7FFE0FFFE03FFC7FFE0FFFE
03FFC7FFE0FFF00FFFF1FFE0FFF00FFFF1FFE0FFF00FFFF1FFE0FFF00FFFF1FF
E0FFF00FFFF1FFE0FFC03FFFFE3FE0FFC03FFFFE3FE0FFC03FFFFE3FE0FFC03F
FFFE3FE0FFC03FFFFE3FE0FFC03FFFFE3FE0FFC03FFFFE3FE0FF01FFFFFE0FE0
FF01FFFFFE0FE0FF003FFFF003E0FF003FFFF003E0FF003FFFF003E0000003FF
C00000000003FFC00000>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
51 70 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a184 {{
96 0 0 0 0 0 setcachedevice
} exec } bind def
/a185 {{
0 0 0 29 73 77 setcachedevice
73.0 0.0 0.0 48.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 73 def
/Height 48 def
/ImageMatrix [73.0 0.0 0.0 -48.0 0.0 48.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFFC7FFFFF1FFFFF80FFFFFC7FFFFF1FFFFF80FFFFFC1FFFFC1FFFFF80FFFF
FC1FFFFC1FFFFF80FFFFFC1FFFFC1FFFFF80FFFFF01FFFFC03FFFF80FFFFF01F
FFFC03FFFF80FFFFF01FFFFC03FFFF80FFFFF01FFFFC03FFFF80FFFFF01FFFFC
03FFFF80FFFFF003FFF003FFFF80FFFFF003FFF003FFFF80FFFF8063FFF018FF
FF80FFFF8063FFF018FFFF80FFFF8063FFF018FFFF80FFFF8063FFF078FFFF80
FFFF8063FFF078FFFF80FFFE0078FF80783FFF80FFFE0078FF80783FFF80FFFE
0078FF80783FFF80FFFE03F8FF807F3FFF80FFFE03F8FF807F3FFF80FFFE03F8
FF83FF3FFF80FFFE03F8FF83FF3FFF80FFF00FFF3E03FFC7FF80FFF00FFF3E03
FFC7FF80FFF00FFF3E03FFC7FF80FFF00FFF3E0FFFC7FF80FFF00FFF3E0FFFC7
FF80FFF00FFF000FFFC7FF80FFF00FFF000FFFC7FF80FFC00FFF000FFFC1FF80
FFC03FFFC00FFFF1FF80FFC03FFFC00FFFF1FF80FFC03FFFC03FFFF1FF80FFC0
3FFFC03FFFF1FF80FFC03FFFC03FFFF1FF80FFC03FFFC03FFFF1FF80FF003FFF
C03FFFF03F80FF01FFFFC03FFFFE3F80FF01FFFFC03FFFFE3F80FF01FFFFC1FF
FFF03F80FF01FFFFC1FFFFF03F80F801FFFF003FFFF00F80F801FFFF003FFFF0
0F80F801FFFF003FFFF00F80000003E00003FF000000000003E00003FF000000
>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
73 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a186 {{
97 0 0 0 0 0 setcachedevice
} exec } bind def
/a187 {{
30 0 0 0 0 0 setcachedevice
} exec } bind def
/a189 {{
35 0 0 0 0 0 setcachedevice
} exec } bind def
/a190 {{
0 0 0 2 34 77 setcachedevice
34.0 0.0 0.0 75.0 0.0 2.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 34 def
/Height 75 def
/ImageMatrix [34.0 0.0 0.0 -75.0 0.0 75.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<000000000000000000000000000000FFC0007FC0FFC0007FC0FFF003FFC0FFF0
03FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FF
C0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FF
F003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003
FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0
FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF0
03FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FF
C0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FF
F003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003
FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0
FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFF003FFC0FFC0
007FC0FFC0007FC0000000000000000000000000000000>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
34 75 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a191 {{
29 0 0 0 0 0 setcachedevice
} exec } bind def
/a192 {{
0 0 0 29 85 77 setcachedevice
85.0 0.0 0.0 48.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 85 def
/Height 48 def
/ImageMatrix [85.0 0.0 0.0 -47.999996 0.0 47.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<0000001F000000F00000000000001F000000F00000000000001F000000F00000
00FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF0
1FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFF
F01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FF
FFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03
FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE
03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFF
FE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03F
FFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC0
3FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FF
C03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8
FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01FF8FFC03FFFFE03FFFFF01F
F8FFC03FFFFE03FFFFF01FF8FFC00FFFFE007FFFF01FF8FFC00FFFFE007FFFF0
1FF8FFC00FFFFE007FFFF01FF8FFC00FFFFE007FFFF01FF8FFC00FFFFE007FFF
F01FF8FFC033FFF00F1FFF807FF8FFC033FFF00F1FFF807FF80000301FF00F00
FF807FF800003C1FF03FE0FF83FFF800003C1FF03FE0FF83FFF8FFC03FE001FF
FF000FFFF8FFC03FE001FFFF000FFFF8>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
85 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a195 {{
0 0 0 27 51 75 setcachedevice
51.0 0.0 0.0 48.0 0.0 27.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 51 def
/Height 48 def
/ImageMatrix [51.0 0.0 0.0 -47.999996 0.0 47.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFFF1FFFFFE0FFFFFF1FFFFFE0FFFFFC03FFFFE0FFFFFC03FFFFE0FFFFFC03
FFFFE0FFFFFC03FFFFE0FFFFFC03FFFFE0FFFFFC03FFFFE0FFFFFC03FFFFE0FF
FFFC03FFFFE0FFFFF018FFFFE0FFFFF018FFFFE0FFFFF018FFFFE0FFFFF018FF
FFE0FFFF80183FFFE0FFFF80183FFFE0FFFF80183FFFE0FFFF807F3FFFE0FFFF
807F3FFFE0FFFF807F3FFFE0FFFF807F3FFFE0FFFF807F3FFFE0FFFE03FFC7FF
E0FFFE03FFC7FFE0FFFE03FFC7FFE0FFFE03FFC7FFE0FFFE03FFC7FFE0FFFE03
FFC7FFE0FFFE03FFC7FFE0FFF00FFFF1FFE0FFF00FFFF1FFE0FFF00FFFF1FFE0
FFF00FFFF1FFE0FFF00FFFF1FFE0FFC03FFFFE3FE0FFC03FFFFE3FE0FFC03FFF
FE3FE0FFC03FFFFE3FE0FFC03FFFFE3FE0FFC03FFFFE3FE0FFC03FFFFE3FE0FF
01FFFFFE0FE0FF01FFFFFE0FE0FF003FFFF003E0FF003FFFF003E0FF003FFFF0
03E0000003FFC00000000003FFC00000>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
51 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a197 {{
0 0 0 50 25 55 setcachedevice
25.0 0.0 0.0 5.0 0.0 50.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 25 def
/Height 5 def
/ImageMatrix [25.0 0.0 0.0 -5.0 0.0 5.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<0000000000000000000000000000000000000000>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
25 5 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a198 {{
38 0 0 0 0 0 setcachedevice
} exec } bind def
/a201 {{
0 0 0 0 51 77 setcachedevice
51.0 0.0 0.0 77.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 51 def
/Height 77 def
/ImageMatrix [51.0 0.0 0.0 -77.0 0.0 77.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<000000780000000000007800000000000078000000FFC03FFFC003E0FFC03FFF
C003E0FFC03FFFC00FE0FFC03FFFC00FE0FFC03FFFC00FE0FFC03FFFC03FE0FF
C03FFFC03FE0FFC03FFF003FE0FFC03FFF003FE0FFC03FFF01FFE0FFC03FFF01
FFE0FFC03FF801FFE0FFC03FF807FFE0FFC03FF807FFE0FFC03FE007FFE0FFC0
3FE007FFE0FFC03FE007FFE0FFC03FE03FFFE0FFC03FE03FFFE0FFC00F00FFFF
E0FFC00F00FFFFE0FFC03000FFFFE0FFC03000FFFFE0FFC03000FFFFE0FFC03C
03FFFFE0FFC03C03FFFFE0FFC03F03FFFFE0FFC03F03FFFFE0FFC03F03FFFFE0
FFC03FE3FFFFE0FFC03FE3FFFFE0FFC03FF8FFFFE0FFC03FF8FFFFE0FFC03FFF
3FFFE0FFC03FFF3FFFE0FFC03FFF07FFE0FFC03FFFC7FFE0FFC03FFFC7FFE0FF
C03FFFC1FFE0FFC03FFFC1FFE0FFC03FFFC00FE0FFC03FFFC00FE0FFC03FFFC0
0FE0FFC03FF8000060FFC03FF8000060FFC03FFFFFFFE0FFC03FFFFFFFE0FFC0
3FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFF
E0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03F
FFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0
FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFF
FFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE000003FFFFFFFE000
003FFFFFFFE000003FFFFFFFE0FFC03FFFFFFFE0FFC03FFFFFFFE0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
51 77 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a202 {{
32 0 0 0 0 0 setcachedevice
} exec } bind def
/a203 {{
0 0 0 -5 27 106 setcachedevice
27.0 0.0 0.0 111.0 0.0 -5.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 27 def
/Height 111 def
/ImageMatrix [27.0 0.0 0.0 -111.0 0.0 111.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFFF00FFFFFF00FFFFFF00FFFFFC60FFFFFC60FFFFE3E0FFFFE3E0FFFF83E0
FFFF8FE0FFFF8FE0FFFE7FE0FFFE7FE0FFF07FE0FFF07FE0FFF07FE0FFC1FFE0
FFC1FFE0FFC1FFE0FFC1FFE0FE01FFE0FE07FFE0FE07FFE0FE07FFE0FE07FFE0
F807FFE0F83FFFE0F83FFFE0F83FFFE0F83FFFE0F83FFFE0F83FFFE0E03FFFE0
E03FFFE0E03FFFE0E0FFFFE0E0FFFFE0E0FFFFE0E0FFFFE0E0FFFFE0E0FFFFE0
E0FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE0
00FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE0
00FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE0
00FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE0E0FFFFE0E0FFFFE0
E0FFFFE0E0FFFFE0E0FFFFE0E0FFFFE0E0FFFFE0E03FFFE0E03FFFE0E03FFFE0
F83FFFE0F83FFFE0F83FFFE0F83FFFE0F83FFFE0F83FFFE0F83FFFE0FE07FFE0
FE07FFE0FE07FFE0FE07FFE0FE01FFE0FFC1FFE0FFC1FFE0FFC1FFE0FFC1FFE0
FFC07FE0FFF07FE0FFF07FE0FFFE7FE0FFFE7FE0FFFF8FE0FFFF8FE0FFFF83E0
FFFFE3E0FFFFE3E0FFFFFC60FFFFFC60FFFFFC00FFFFFF00FFFFFF00>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
27 111 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a204 {{
0 0 0 -5 27 106 setcachedevice
27.0 0.0 0.0 111.0 0.0 -5.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 27 def
/Height 111 def
/ImageMatrix [27.0 0.0 0.0 -111.0 0.0 111.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<1FFFFFE01FFFFFE01FFFFFE0E7FFFFE0E7FFFFE0F8FFFFE0F8FFFFE0F83FFFE0
FE3FFFE0FE3FFFE0FFC7FFE0FFC7FFE0FFC1FFE0FFC1FFE0FFC1FFE0FFF07FE0
FFF07FE0FFF07FE0FFF07FE0FFF00FE0FFFE0FE0FFFE0FE0FFFE0FE0FFFE0FE0
FFFE03E0FFFF83E0FFFF83E0FFFF83E0FFFF83E0FFFF83E0FFFF83E0FFFF8060
FFFF8060FFFF8060FFFFE060FFFFE060FFFFE060FFFFE060FFFFE060FFFFE060
FFFFE060FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000
FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000
FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000
FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE000FFFFE060FFFFE060
FFFFE060FFFFE060FFFFE060FFFFE060FFFFE060FFFF8060FFFF8060FFFF8060
FFFF83E0FFFF83E0FFFF83E0FFFF83E0FFFF83E0FFFF83E0FFFF83E0FFFE0FE0
FFFE0FE0FFFE0FE0FFFE0FE0FFF00FE0FFF07FE0FFF07FE0FFF07FE0FFF07FE0
FFC07FE0FFC1FFE0FFC1FFE0FFC7FFE0FFC7FFE0FE3FFFE0FE3FFFE0F83FFFE0
F8FFFFE0F8FFFFE0E7FFFFE0E7FFFFE007FFFFE01FFFFFE01FFFFFE0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
27 111 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a208 {{
100 0 0 0 0 0 setcachedevice
} exec } bind def
/a209 {{
99 0 0 0 0 0 setcachedevice
} exec } bind def
/a210 {{
71 0 0 0 0 0 setcachedevice
} exec } bind def
/a212 {{
112 0 0 0 0 0 setcachedevice
} exec } bind def
/a213 {{
90 0 0 0 0 0 setcachedevice
} exec } bind def
/a214 {{
83 0 0 0 0 0 setcachedevice
} exec } bind def
/a215 {{
105 0 0 0 0 0 setcachedevice
} exec } bind def
/a216 {{
0 0 0 -2 56 75 setcachedevice
56.0 0.0 0.0 77.0 0.0 -2.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 56 def
/Height 77 def
/ImageMatrix [55.999996 0.0 0.0 -77.0 0.0 77.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<C00000FFC00000C00000FFC00000C00000FFC00000FFF00FFFFC03FFFFF00FFF
FC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFF
F00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC
03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF0
0FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03
FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00F
FFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FF
FFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFF
FC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFF
F00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC03FFFFF00FFFFC
03FF000000000003FF000000000003FFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF0
0FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFF
FFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00F
FFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFF003FFFFF00FFFF003FF
FFF00FFFF003FFFFF00FFFF003FFFFF00FFFF003FFFFF003FFF003FFFFFC03FF
F003FFFFFC03FFF003FFFFFF80FFFC0FFFFFFF80FFFC0FFFFFFFE01FFC0FFFFF
FFE01FFC0FFFFFFFE000000FFFFFFFFF0001FFFFFFFFFF0001FFFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
56 77 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a217 {{
28 0 0 0 0 0 setcachedevice
} exec } bind def
/a220 {{
0 0 0 29 52 99 setcachedevice
52.0 0.0 0.0 70.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 52 def
/Height 70 def
/ImageMatrix [51.999996 0.0 0.0 -70.0 0.0 70.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFFF80000000FFFFFF80000000FFFFFF80000000FFFFFFFFC03FF0FFFFFFFF
C03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FF
FFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC0
3FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFF
FFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFFFFFFC03FF0FFFE000FC03F
F0FFFE000FC03FF0FFC00003C03FF0FFC03FE3C03FF0FFC03FE3C03FF0FF00FF
FCC03FF0FF00FFFCC03FF0FC00FFFC003FF0FC07FFFF003FF0FC07FFFF003FF0
FC07FFFFC03FF0FC07FFFFC03FF0E007FFFFC03FF0E007FFFFC03FF0E007FFFF
C03FF0E01FFFFFC03FF0E01FFFFFC03FF0801FFFFFC03FF0801FFFFFC03FF080
1FFFFFC03FF0801FFFFFC03FF0801FFFFFC03FF0801FFFFFC03FF0801FFFFFC0
3FF0801FFFFFC03FF0801FFFFFC03FF0801FFFFFC03FF0801FFFFFC03FF0801F
FFFFC03FF0801FFFFFC03FF0801FFFFFC03FF0801FFFFFC03FF0E01FFFFFC03F
F0E01FFFFFC03FF0E007FFFFC03FF0E007FFFFC03FF0FC07FFFFC03FF0FC07FF
FFC03FF0FC00FFFF003FF0FC00FFFF003FF0FC00FFFF003FF0FF00FFFF183FF0
FF00FFFF183FF0FF003FE0183FF0FFF83FE0F83FF0FFF83FE0F83FF0FFFE000F
FE3FF0FFFE000FFE3FF0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
52 70 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/A/N19 -1 TZ
%%BeginResource: font B
10 dict begin
T3Defs
/FontType 3 def
/FontName /N18 def
/FontMatrix [1 
0 
0 
1 
0 
0 ]def
/FontBBox [0 
-65 
106 
142 ]def
/Encoding [/a0 /a1 
1 nND
/a3 /a4 
2 nND
/a7 
5 nND
/a13 
14 nND
/a28 /a29 /a30 /a31 
6 nND
/a38 /a39 
2 nND
/a42 
4 nND
/a47 /a48 
3 nND
/a52 
12 nND
/a65 /a66 
1 nND
/a68 /a69 /a70 
185 nND] def
/GlyphProcs 22 dict begin
/.notdef {250 0 d0} bind def
/a0 {{
0 0 0 0 61 75 setcachedevice
61.0 0.0 0.0 75.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 61 def
/Height 75 def
/ImageMatrix [61.000004 0.0 0.0 -74.999992 0.0 74.999992]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<8000000007FFFFF88000000007FFFFF88000000007FFFFF8FFC0007FFFFFFFF8
FFC0007FFFFFFFF8FFF801FFFFFFFFF8FFF801FFFFFFFFF8FFF801FFFFFFFFF8
FFF801FFFFFFFFF8FFF801FFFFFFFFF8FFF801FFFFFFFFF8FFF801FFFFFFFFF8
FFF801FFFFFFFFF8FFF801FFFFFFFFF8FFF801FFFFFFFFF8FFF801FFFFFFFFF8
FFF801FFFFFFFFF8FFF801FFFFFFFFF8FFF801FFFFFFFFF8FFF801FFFFFFFFF8
FFF801FFFFFFFFF8FFF801FFFFFFFFF8FFF801FFFFFFFFF8FFF801FFFFFFFFF8
FFF801FFFE3FFFF8FFF801FFFE3FFFF8FFF801FFFE3FFFF8FFF801FFFE3FFFF8
FFF801FFFE3FFFF8FFF801FFFE3FFFF8FFF801FFFE3FFFF8FFF801FFFE3FFFF8
FFF801FFFE3FFFF8FFF801FFFE3FFFF8FFF801FFF83FFFF8FFF801FFF83FFFF8
FFF80000003FFFF8FFF80000003FFFF8FFF80000003FFFF8FFF801FFF83FFFF8
FFF801FFF83FFFF8FFF801FFFE3FFFF8FFF801FFFE3FFFF8FFF801FFFE3FFFF8
FFF801FFFE3FFFF8FFF801FFFE3FFFF8FFF801FFFE3FFFF8FFF801FFFE3FFFF8
FFF801FFFE3FFFF8FFF801FFFE3FFFF8FFF801FFFE3FFFC0FFF801FFFFFFFFC0
FFF801FFFFFFFFC0FFF801FFFFFFFFC0FFF801FFFFFFFFC0FFF801FFFFFFFFC0
FFF801FFFFFFFFC0FFF801FFFFFFFFC0FFF801FFFFFFFFC0FFF801FFFFFFFFC0
FFF801FFFFFFFF00FFF801FFFFFFFF00FFF801FFFFFFFF00FFF801FFFFFFFF18
FFF801FFFFFFFF18FFF801FFFFFFFC18FFF801FFFFFFFC18FFF801FFFFFFFC18
FFF801FFFFFFFC18FFF801FFFFFFFC18FFC001FFFFFF8018FFC001FFFFFF8018
800000000000001880000000000000188000000000000018>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
61 75 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a1 {{
0 0 0 29 13 77 setcachedevice
13.0 0.0 0.0 48.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 13 def
/Height 48 def
/ImageMatrix [12.999999 0.0 0.0 -47.999996 0.0 47.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<E018E01880008000800080008000800080008000E018E018FFF8FFF8FFF8FFF8
FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8
FFF8FFF8FFF8FFF8E018E01880008000800080008000800080008000E018E018
>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
13 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a3 {{
0 0 0 27 39 75 setcachedevice
39.0 0.0 0.0 48.0 0.0 27.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 39 def
/Height 48 def
/ImageMatrix [39.0 0.0 0.0 -47.999996 0.0 47.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<000000000600000000060000000006E03FFFF806E03FFFF806E03FFFFF06E03F
FFFF06E007FFFF06F807FFFFC6F807FFFFC6FF01FFFFC0FF01FFFFC0FF003FFF
F0FF003FFFF0FF003FFFF0FFC03FFFF0FFC03FFFF0FFF00FFFF0FFF00FFFF0FF
F003FFF0FFF003FFFEFFF003FFFEFFFE03FFFEFFFE03FFFEFFFF807FFEFFFF80
7FFEFFFF801FFEFFFF801FFEFFFF801FFEFFFFF01FFEFFFFF01FFEE3FFF003FE
E3FFFC03FEE3FFFC03FEE3FFFC00FEE3FFFC00FEE3FFFF00FEE3FFFF00FEE0FF
FF003EF8FFFFE03EF8FFFFE03EF8FFFFF806F8FFFFF806F807FFF806F807FFF8
06F807FFF806F800000000F800000000>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
39 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a4 {{
31 0 0 0 0 0 setcachedevice
} exec } bind def
/a7 {{
96 0 0 0 0 0 setcachedevice
} exec } bind def
/a13 {{
65 0 0 0 0 0 setcachedevice
} exec } bind def
/a28 {{
67 0 0 0 0 0 setcachedevice
} exec } bind def
/a29 {{
0 0 0 0 106 77 setcachedevice
106.0 0.0 0.0 77.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 106 def
/Height 77 def
/ImageMatrix [106.0 0.0 0.0 -77.0 0.0 77.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFFFFF3FFFFFFFFF1FFFFFFFC0FFFFFFFF3FFFFFFFFF1FFFFFFFC0FFFFFFF8
3FFFFFFFFF03FFFFFFC0FFFFFFF83FFFFFFFFF03FFFFFFC0FFFFFFF807FFFFFF
FC03FFFFFFC0FFFFFFF807FFFFFFFC03FFFFFFC0FFFFFFF807FFFFFFFC03FFFF
FFC0FFFFFFF807FFFFFFFC03FFFFFFC0FFFFFFF807FFFFFFFC03FFFFFFC0FFFF
FFE007FFFFFFFC00FFFFFFC0FFFFFFE007FFFFFFFC00FFFFFFC0FFFFFFE007FF
FFFFFC00FFFFFFC0FFFFFFE001FFFFFFF000FFFFFFC0FFFFFFE001FFFFFFF000
FFFFFFC0FFFFFFE001FFFFFFF000FFFFFFC0FFFFFFE001FFFFFFF000FFFFFFC0
FFFFFFE001FFFFFFF000FFFFFFC0FFFFFFE001FFFFFFF000FFFFFFC0FFFFFFE0
01FFFFFFF000FFFFFFC0FFFFFF003E3FFFFF801F3FFFFFC0FFFFFF003E3FFFFF
801F3FFFFFC0FFFFFF003E3FFFFF801F3FFFFFC0FFFFFF003E3FFFFF801F3FFF
FFC0FFFFFF003E3FFFFF801F3FFFFFC0FFFFFF003E3FFFFF801F3FFFFFC0FFFF
FF003E3FFFFF801F3FFFFFC0FFFFFC00FE0FFFFE001FC7FFFFC0FFFFFC00FE0F
FFFE001FC7FFFFC0FFFFFC00FE0FFFFE001FC7FFFFC0FFFFFC00FF8FFFFE007F
C7FFFFC0FFFFFC00FF8FFFFE007FC7FFFFC0FFFFFC00FF8FFFFE007FC7FFFFC0
FFFFFC00FF8FFFFE007FC7FFFFC0FFFFF000FF8FFFFE007FC1FFFFC0FFFFF003
FF8FFFFE007FF1FFFFC0FFFFF003FF8FFFFE007FF1FFFFC0FFFFF003FFF3FFF0
03FFF1FFFFC0FFFFF003FFF3FFF003FFF1FFFFC0FFFFF003FFF3FFF003FFF1FF
FFC0FFFFF003FFF3FFF003FFF1FFFFC0FFFF8003FFF3FFF003FFF03FFFC0FFFF
8003FFF3FFF003FFFE3FFFC0FFFF8003FFF3FFF003FFFE3FFFC0FFFF801FFFFC
7FC00FFFFE3FFFC0FFFF801FFFFC7FC00FFFFE3FFFC0FFFF801FFFFC7FC00FFF
FE3FFFC0FFFF801FFFFC7FC00FFFFE3FFFC0FFFF801FFFFC7FC00FFFFE3FFFC0
FFFE001FFFFC7FC00FFFFE0FFFC0FFFE001FFFFC7FC00FFFFE0FFFC0FFFE007F
FFFF1F003FFFFF8FFFC0FFFE007FFFFF1F003FFFFF8FFFC0FFFE007FFFFF1F00
3FFFFF8FFFC0FFFE007FFFFF1F003FFFFF8FFFC0FFFE007FFFFF1F003FFFFF8F
FFC0FFFE007FFFFF1F003FFFFF8FFFC0FFFE007FFFFF1F003FFFFF8FFFC0FFF0
007FFFFF00003FFFFF83FFC0FFF003FFFFFFE001FFFFFFF3FFC0FFF003FFFFFF
E001FFFFFFF3FFC0FFF003FFFFFFE001FFFFFFF3FFC0FFF003FFFFFFE001FFFF
FFF3FFC0FFF003FFFFFFE001FFFFFFF3FFC0FFF003FFFFFFE001FFFFFFF3FFC0
FFC003FFFFFFE001FFFFFFF07FC0FFC00FFFFFFFE001FFFFFFFC7FC0FFC00FFF
FFFFE001FFFFFFFC7FC0FFC00FFFFFFFE007FFFFFFFC7FC0FFC00FFFFFFFE007
FFFFFFFC7FC0FFC00FFFFFFFE007FFFFFFF01FC0FFC00FFFFFFFE007FFFFFFF0
1FC0FFC00FFFFFFFE007FFFFFFF01FC0FF0003FFFFFF0001FFFFFF8003C0FF00
03FFFFFF0001FFFFFF8003C000000003FF80000003FFF000000000000003FF80
000003FFF000000000000003FF80000003FFF0000000>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
106 77 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a30 {{
0 0 0 29 65 77 setcachedevice
65.0 0.0 0.0 48.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 65 def
/Height 48 def
/ImageMatrix [65.0 0.0 0.0 -48.0 0.0 48.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FE007FFFC00FFFFF80FE007FFFC00FFFFF80F80003FE0000FFFF80F80003FE00
00FFFF80F80003FE0000FFFF80C00000F800001FFF80C00000F800001FFF8000
000018000007FF8000000018000007FF8000000018000007FF8000FFFC003FFF
00FF8000FFFC003FFF00FF8007FFFF00FFFFC0FF8007FFFF00FFFFC0FF8007FF
FF00FFFFC03F8007FFFFC0FFFFF83F8007FFFFC0FFFFF83F8007FFFFF8FFFFFE
0F8007FFFFF8FFFFFE0F8007FFFFF8FFFFFE0F801FFFFFF8FFFFFFCF801FFFFF
F8FFFFFFCF801FFFFFF83FFFFFCF801FFFFFF83FFFFFCF80C7FFFFF83FFFFFF1
80C7FFFFF83FFFFFF180C7FFFFF83FFFFFF180C7FFFFF83FFFFFF180C7FFFFF8
3FFFFFF180C7FFFFFE3FFFFFF180C7FFFFFE3FFFFFF180C0FFFFFE3FFFFFF180
F8FFFFFFFFFFFFF180F8FFFFFFFFFFFFF180F8FFFFFFFFFFFFC000F8FFFFFFFF
FFFFC000F8FFFFFFFFFFFFC000F8FFFFFFFFFFFFC000F83FFFFFFFFFFE0000FE
3FFFFFFFFFFE0000FE3FFFFFFFFFFE0000FE3FFFFFFFFFF80000FE3FFFFFFFFF
F80000FE0FFFFFFFFFF80000FFCFFFFFFFFFF80180FFCFFFFFFFFFF80180FFF1
FFFFFFFFFE0F80FFF1FFFFFFFFFE0F80>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
65 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a31 {{
84 0 0 0 0 0 setcachedevice
} exec } bind def
/a38 {{
0 0 0 43 37 94 setcachedevice
37.0 0.0 0.0 51.0 0.0 43.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 37 def
/Height 51 def
/ImageMatrix [37.0 0.0 0.0 -50.999996 0.0 50.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFF0007FF8FFF0007FF8FF000003F8FF01FC03F8FF01FC03F8F83FFFE0F8F83F
FFE0F8E03FFFE038E03FFFE038E03FFFE038E0FFFFF838E0FFFFF838E0FFFFF8
38E0FFFFF83800FFFFF80000FFFFF80000FFFFF80000FFFFF80000FFFFF80000
FFFFF80000FFFFF80000FFFFF80000FFFFF80000FFFFF80000FFFFF80000FFFF
F80000FFFFF80000FFFFF80000FFFFF80000FFFFF80000FFFFF80000FFFFF800
00FFFFF80000FFFFF80000FFFFF80000FFFFF800E0FFFFF838E0FFFFF838E0FF
FFF838E0FFFFF838E0FFFFF838E03FFFE038E03FFFE038E03FFFE038F83FFFE0
F8F83FFFE0F8FF07FF03F8FF07FF03F8FFF0007FF8FFF0007FF8FFF0007FF8>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
37 51 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a39 {{
69 0 0 0 0 0 setcachedevice
} exec } bind def
/a42 {{
0 0 0 43 30 94 setcachedevice
30.0 0.0 0.0 51.0 0.0 43.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 30 def
/Height 51 def
/ImageMatrix [29.999998 0.0 0.0 -51.0 0.0 51.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<E0000000E0000000E0000000FFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFC
FFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFC
FFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFC
FFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFC
FFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFCFFF80FFC
FFF80FFCFFF80FFCFFF80FFC80000FFC80000FFC80000FFCFFF80FFCFFF80FFC
FFFE0FFCFFFE0FFCFFFE0FFC>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
30 51 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a47 {{
0 0 0 0 61 48 setcachedevice
61.0 0.0 0.0 48.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 61 def
/Height 48 def
/ImageMatrix [61.000004 0.0 0.0 -47.999996 0.0 47.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<000003FFF0000000000003FFF0000000000003FFF0000000000003FFF0000000
000003FFF0000000FFC03FFFFE0003F8FFC03FFFFE0003F8FFC00FFFF00003F8
FFF00FFFF0001FF8FFF00FFFF0001FF8FFFE03FFF0007FF8FFFE03FFF0007FF8
FFFF83FFC003FFF8FFFF83FFC003FFF8FFFF807F0003FFF8FFFFF07F000FFFF8
FFFFF07F000FFFF8FFFFFC18003FFFF8FFFFFC18003FFFF8FFFFFC00003FFFF8
FFFFFC00003FFFF8FFFFFC00003FFFF8FFFFFF0001FFFFF8FFFFFF0001FFFFF8
FFFFFF0007FFFFF8FFFFFF0007FFFFF8FFFFFC0007FFFFF8FFFFFC0007FFFFF8
FFFFFC0007FFFFF8FFFFF00001FFFFF8FFFFF00001FFFFF8FFFF8000003FFFF8
FFFF8003C03FFFF8FFFF8003C03FFFF8FFFE001FF03FFFF8FFFE001FF03FFFF8
FFF0001FFE0FFFF8FFF0001FFE0FFFF8FFF0001FFE03FFF8FFF0007FFE03FFF8
FFF0007FFE03FFF8FFC003FFFF807FF8FFC003FFFF807FF80000001FF0000038
0000001FF00000380000001FF00000380000001FF00000380000001FF0000038
>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
61 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a48 {{
0 0 0 7 68 36 setcachedevice
68.0 0.0 0.0 29.0 0.0 7.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 68 def
/Height 29 def
/ImageMatrix [68.0 0.0 0.0 -29.0 0.0 29.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<E00000000000000070E000000000000000700000000000000000000000000000
00000000000000000000000000FFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFF0FF
FFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFF0FFFFFFFFFFFF
FFFFF0FFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFF0FFFF
FFFFFFFFFFFFF0FFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFF
FFF0FFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFF0FFFFFF
FFFFFFFFFFF0FFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFF00000000000000000
00000000000000000000000000000000000000E00000000000000070E0000000
0000000070>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
68 29 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a52 {{
0 0 0 0 49 48 setcachedevice
49.0 0.0 0.0 48.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 49 def
/Height 48 def
/ImageMatrix [49.0 0.0 0.0 -48.0 0.0 48.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FC07FF801FFF80FC07FF801FFF80E000FC0000FF80E3F8FC0FC0FF80E3F8FC0F
C0FF8080FE307FFE3F8080FE307FFE3F80801E007FFE3F80801FC07FFE3F8080
1FC07FFE3F80801FC07FFFCF80801FC07FFFCF80E0FFC07FFFCF80E0FFC07FFF
CF80E0FFC00FFFC180FFFFF00FFFF180FFFFF00FFFF180FFFFF00FFFFF80FFFF
F00FFFFF80FFFFF00FFFFF80FFFFF00FFFFF80FFFFF00FFFFF80FFFFF00FFFFF
80FFFFF00FFFFF80FFFFFC03FFFF80FFFFFC03FFFF80FFFFFC03FFFF80FFFFFC
03FFFF80FFFFFC03FFFF80FFFFFC03FFFF80FFFFFC03FFFF80E3FFFC03FFFF80
E3FFFC03FFFF80E3FFFC03FFFF80FCFFFF80FFC180FCFFFF80FFC180FCFFFF80
FE0000FCFFFF80FE0000FC1FFF80FE0000FF1FFF80FE0000FF1FFF80FE0000FF
1FFF831FC000FF1FFF831FC000FF00FC0307C000FFC0FC0FC7F180FFC0FC0FC7
F180FFFE007FF80F80FFFE007FF80F80>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
49 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a65 {{
0 0 0 2 76 77 setcachedevice
76.0 0.0 0.0 75.0 0.0 2.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 76 def
/Height 75 def
/ImageMatrix [76.0 0.0 0.0 -75.0 0.0 75.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<800000001FFFFFFFFFF0800000001FFFFFFFFFF0800000001FFFFFFFFFF0FFF8
007FFFFFFFFFFFF0FFF8007FFFFFFFFFFFF0FFFE007FFFFFFFFFFFF0FFFE007F
FFFFFFFFFFF0FFFE007FFFFFFFFFFFF0FFFE007FFFFFFFFFFFF0FFFE007FFFFF
FFFFFFF0FFFE007FFFFFFFFFFFF0FFFE007FFFFFFFFFFFF0FFFE007FFFFFFFFF
FFF0FFFE007FFFFFFFFFFFF0FFFE000FFFFFFFFFFFF0FFFFC00FFFFFFFFFFFF0
FFFFC00FFFFFFFFFFFF0FFFFC00FFFFFFFFFFFF0FFFFC00FFFFFFFFFFFF0FFFF
C00FFFFFFFFFFFF0FFFFC00FFFFFFFFFFFF0FFFFC00FFFFFFFFFFFF0FFFFC00F
FFFFFFFFFFF0FFFFC00FFFFFFFFFFFF0FFFFF003FFFFFFFFFFF0FFFFF003FFFF
FFFFFFF0FFFFF003FFFFFFFFFFF0FFFFF003FFFFFFFFFFF0FFFFF003FFFFFFFF
FFF0FFFFF003FFFFFFFFFFF0FFFFF003FFFFFFFFFFF0FFFFF003FFFFFFFFFFF0
FFFFF003FFFFFFFFFFF0FFFFF003FFFFFFFFFFF0FFFFFC00FFFFFFFFFFF0FFFF
FC00FFFFFFFFFFF0FFFFFC00000000FFFFF0FFFFFC00000000FFFFF0FFFFFC00
00000007FFF0FFFFFC00FFFFFC07FFF0FFFFFC00FFFFFC07FFF0FFFFFC00FFFF
FFC03FF0FFFFFC00FFFFFFC03FF0FFFFFC001FFFFFC00FF0FFFFFF801FFFFFF8
0FF0FFFFFF801FFFFFF80FF0FFFFFF801FFFFFF801F0FFFFFF801FFFFFF801F0
FFFFFF801FFFFFFE0070FFFFFF801FFFFFFE0070FFFFFF801FFFFFFE0070FFFF
FF801FFFFFFE0070FFFFFF801FFFFFFE0070FFFFFFE007FFFFFFC000FFFFFFE0
07FFFFFFC000FFFFFFE007FFFFFFC000FFFFFFE007FFFFFFC000FFFFFFE007FF
FFFFC000FFFFFFE007FFFFFFC000FFFFFFE007FFFFFFC000FFFFFFE007FFFFFF
C000FFFFFFE007FFFFFFC000FFFFFFE000FFFFFFC000FFFFFFFC00FFFFFFC000
FFFFFFFC00FFFFFFC000FFFFFFFC00FFFFFFC070FFFFFFFC00FFFFFFC070FFFF
FFFC00FFFFFE0070FFFFFFFC00FFFFFE01F0FFFFFFFC00FFFFFE01F0FFFFFFFC
00FFFFF80FF0FFFFFFFC00FFFFF80FF0FFFFF00000000000FFF0FFFFF0000000
0000FFF0FFFFF00000000000FFF0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
76 75 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a66 {{
36 0 0 0 0 0 setcachedevice
} exec } bind def
/a68 {{
0 0 0 -34 6 74 setcachedevice
6.0 0.0 0.0 108.0 0.0 -34.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 6 def
/Height 108 def
/ImageMatrix [6.0 0.0 0.0 -108.0 0.0 108.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<8080808080808080808080808080808080808080808080808080808080808080
8080808080808080808080808080808080808080808080808080808080808080
8080808080808080808080808080808080808080808080808080808080808080
808080808080808080808080>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
6 108 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a69 {{
0 0 0 0 73 79 setcachedevice
73.0 0.0 0.0 79.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 73 def
/Height 79 def
/ImageMatrix [73.0 0.0 0.0 -79.0 0.0 79.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFFFF80003FFFFFF80FFFFFFF80003FFFFFF80FFFFFC00FFFC1FFE7F80FFFF
FC00FFFC1FFE7F80FFFFE000FFFC07F07F80FFFFE01FFFFFE7F07F80FFFFE01F
FFFFE7F07F80FFFE03FFFFFFF8C07F80FFFE03FFFFFFF8C07F80FFF003FFFFFF
F8007F80FFF00FFFFFFFFE007F80FFF00FFFFFFFFE007F80FFC00FFFFFFFFE00
7F80FFC00FFFFFFFFE007F80FE007FFFFFFFFE007F80FE007FFFFFFFFE007F80
FE007FFFFFFFFE007F80FE007FFFFFFFFE007F80FE007FFFFFFFFE007F80F801
FFFFFFFFFE007F80F801FFFFFFFFFE007F80F801FFFFFFFFFE007F80F801FFFF
FFFFFE007F80F801FFFFFFFFFE007F80E001FFFFFFFFFE007F80E001FFFFFFFF
FE007F80E007FFFFFFFFFE007F80E007FFFFFFFFFE007F800007FFFFFFFFF800
7F800007FFFFFFFFF8007F800007FFFFFFFFF8007F800007FFFFFF8000000000
0007FFFFFF80000000000007FFFFFF80000000000007FFFFFFFFFFFFFF800007
FFFFFFFFFFFFFF800007FFFFFFFFFFFFFF800007FFFFFFFFFFFFFF800007FFFF
FFFFFFFFFF800007FFFFFFFFFFFFFF800007FFFFFFFFFFFFFF800007FFFFFFFF
FFFFFF800007FFFFFFFFFFFFFF800007FFFFFFFFFFFFFF800007FFFFFFFFFFFF
FF800007FFFFFFFFFFFFFF800007FFFFFFFFFFFFFF800007FFFFFFFFFFFFFF80
0007FFFFFFFFFFFFFF800007FFFFFFFFFFFFFF80E007FFFFFFFFFFFE7F80E007
FFFFFFFFFFFE7F80E001FFFFFFFFFFFE7F80E001FFFFFFFFFFFE7F80E001FFFF
FFFFFFFE7F80F801FFFFFFFFFFFE7F80F801FFFFFFFFFFFE7F80F801FFFFFFFF
FFF07F80F801FFFFFFFFFFF07F80F801FFFFFFFFFFF07F80FE007FFFFFFFFFF0
7F80FE007FFFFFFFFFF07F80FE007FFFFFFFFFF07F80FE007FFFFFFFFFF07F80
FE000FFFFFFFFFC07F80FFC00FFFFFFFFFC07F80FFC00FFFFFFFFFC07F80FFF0
0FFFFFFFFE007F80FFF00FFFFFFFFE007F80FFF003FFFFFFF8007F80FFFE03FF
FFFFF8C07F80FFFE03FFFFFFF8C07F80FFFFE01FFFFFE7C07F80FFFFE01FFFFF
E7C07F80FFFFFC00FFFC1FF07F80FFFFFC00FFFC1FF07F80FFFFFC0000001FF0
7F80FFFFFFF80003FFFE7F80FFFFFFF80003FFFE7F80>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
73 79 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a70 {{
0 0 0 0 44 72 setcachedevice
44.0 0.0 0.0 72.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 44 def
/Height 72 def
/ImageMatrix [44.0 0.0 0.0 -72.0 0.0 72.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<800000000030800000000030800000000030E00000000030E00000000030FC00
00000030FC0000000030FC0000000030FF1FFFFFFE30FF1FFFFFFE30FF07FFFF
FFC0FF07FFFFFFC0FFC0FFFFFFC0FFC0FFFFFFC0FFC03FFFFFC0FFF83FFFFFC0
FFF83FFFFFC0FFFE0FFFFFF0FFFE0FFFFFF0FFFE01FFFFF0FFFFC1FFFFF0FFFF
C1FFFFF0FFFFF07FFFF0FFFFF07FFFF0FFFFFC0FFFF0FFFFFC0FFFF0FFFFFC03
FFF0FFFFFC03FFF0FFFFFC03FFF0FFFFFF80FFF0FFFFFF80FFF0FFFFFF801FF0
FFFFFFE01FF0FFFFFFE01FF0FFFFFFFC07F0FFFFFFFC07F0FFFFFFFC00F0FFFF
FFFC00F0FFFFFFFC0030FFFFFFFF0030FFFFFFFF0030FFFFFFFF0030FFFFFFFF
0030FFFFFFFF0000FFFFFFFF0000FFFFFFFF0000FCFFFFFF0000FCFFFFFF0000
8007FFFFC0008007FFFFC0008007FFFFC0008007FFFFC0008007FFFFC0008007
FFFFC0008007FFFFC0008007FFFF0000801FFFFF0000801FFFFF00008FFFFFFF
00308FFFFFFF0030E3FFFFFF0030E3FFFFFF0030E0FFFFFF0030FCFFFFFF00F0
FCFFFFFF00F0FF1FFFFC07F0FF1FFFFC07F0FF00FFE007F0FFC0FFE01FF0FFC0
FFE01FF0FFFE0003FFF0FFFE0003FFF0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
44 72 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/B/N18 -1 TZ
%%BeginResource: font C
10 dict begin
T3Defs
/FontType 3 def
/FontName /N17 def
/FontMatrix [1 
0 
0 
1 
0 
0 ]def
/FontBBox [0 
-205 
85 
313 ]def
/Encoding [
1 nND
/a1 /a2 
1 nND
/a4 
2 nND
/a7 
1 nND
/a9 
4 nND
/a14 
5 nND
/a20 
1 nND
/a22 /a23 
27 nND
/a51 
6 nND
/a58 
1 nND
/a60 
26 nND
/a87 
1 nND
/a89 
2 nND
/a92 
163 nND] def
/GlyphProcs 16 dict begin
/.notdef {250 0 d0} bind def
/a1 {{
0 0 0 0 56 48 setcachedevice
56.0 0.0 0.0 48.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 56 def
/Height 48 def
/ImageMatrix [55.999996 0.0 0.0 -47.999996 0.0 47.999996]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<00000FFE00000000000FFE00000000000FFE000000FE007FFFF003FFFE007FFF
F003FFFFF07FFFF003FFFFF07FFFF003FFFFF07FFFF003FFFFFC7FFFF00FFFFF
FC7FFFF00FFFFFFC0FFFC07FFFFFFC0FFFC07FFFFFFF8FFE01FFFFFFFF8FFE01
FFFFFFFF83FE01FFFFFFFFE3FE01FFFFFFFFE3FE01FFFFFFFFFCF80FFFFFFFFF
FCF80FFFFFFFFFFC000FFFFFFFFFFC003FFFFFFFFFFC003FFFFFFFFFFF003FFF
FFFFFFFF003FFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFC00FFFFFFFFFFFC
00FFFFFFFFFFFC00FFFFFFFFFFE0183FFFFFFFFFE0183FFFFFFFFFE0183FFFFF
FFFFE01E3FFFFFFFFFE01E3FFFFFFFFF80FFCFFFFFFFFF80FFCFFFFFFFFC03FF
F1FFFFFFFC03FFF1FFFFFFF003FFF07FFFFFF00FFFF07FFFFFF00FFFF07FFFFF
F00FFFF00FFFFFF00FFFF00FFFFFC00FFFF003FFFFC00FFFF003FFFFC00FFFF0
03FFC00000FFC00007C00000FFC00007>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
56 48 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a2 {{
0 0 0 12 68 89 setcachedevice
68.0 0.0 0.0 77.0 0.0 12.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 68 def
/Height 77 def
/ImageMatrix [68.0 0.0 0.0 -77.0 0.0 77.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07
FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FF
FFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FF
FFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFF
FFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFF
FFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFF
FE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFF
F0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE
07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0
FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07
FFFFFFF000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000FFFFFFFE07FFFFFFF0FFFFFFFE07FF
FFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFF
FFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFF
FFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFF
FE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFF
F0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE
07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0
FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07
FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FF
FFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FF
FFFFF0FFFFFFFE07FFFFFFF0FFFFFFFE07FFFFFFF0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
68 77 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a4 {{
75 0 0 0 0 0 setcachedevice
} exec } bind def
/a7 {{
0 0 0 48 63 53 setcachedevice
63.0 0.0 0.0 5.0 0.0 48.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 63 def
/Height 5 def
/ImageMatrix [62.999996 0.0 0.0 -5.0 0.0 5.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<8000000000000000800000000000000080000000000000008000000000000000
8000000000000000>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
63 5 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a9 {{
96 0 0 0 0 0 setcachedevice
} exec } bind def
/a14 {{
0 0 0 -19 49 22 setcachedevice
49.0 0.0 0.0 41.0 0.0 -19.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 49 def
/Height 41 def
/ImageMatrix [49.0 0.0 0.0 -41.0 0.0 41.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<00003FF800000000003FF800000000003FF800000000003FF800000000003FF8
000000FF01FFFF003F80FF01FFFF003F80FF003FF8003F80FFC03FF801FF80FF
C03FF801FF80FFF00FE007FF80FFF00FE007FF80FFFE0FE007FF80FFFE0FE007
FF80FFFE030007FF80FFFF83003FFF80FFFF83003FFF80FFFF8000FFFF80FFFF
8000FFFF80FFFF8000FFFF80FFFFF003FFFF80FFFFF003FFFF80FFFF8003FFFF
80FFFF8003FFFF80FFFE0000FFFF80FFFE0000FFFF80FFFE0000FFFF80FFFE00
60FFFF80FFFE0060FFFF80FFF003F83FFF80FFF003F83FFF80FFC003F807FF80
FFC00FFF07FF80FFC00FFF07FF80FF003FFF01FF80FF003FFF01FF8000000FF8
00000000000FF800000000000FF800000000000FF800000000000FF8000000>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
49 41 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a20 {{
53 0 0 0 0 0 setcachedevice
} exec } bind def
/a22 {{
45 0 0 0 0 0 setcachedevice
} exec } bind def
/a23 {{
0 0 0 -5 23 34 setcachedevice
23.0 0.0 0.0 39.0 0.0 -5.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 23 def
/Height 39 def
/ImageMatrix [23.0 0.0 0.0 -39.0 0.0 39.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<800000800000800000FFC0FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0
FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0FEFF
C0FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0FEFFC0FE83C0FE
83C0FE83C0FEFC00FEFC00FEFFC0FEFFC0FEFFC0FE>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
23 39 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a51 {{
0 0 0 205 49 275 setcachedevice
49.0 0.0 0.0 70.0 0.0 205.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 49 def
/Height 70 def
/ImageMatrix [49.0 0.0 0.0 -70.0 0.0 70.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FF000FFFFFFF80FF000FFFFFFF80FF000FFFFFFF80FCFFC07FFFFF80FCFFC07F
FFFF80E0FFC00FFFFF80E0FFFC0FFFFF80E0FFFC0FFFFF80E01FFC03FFFF80E0
1FFC03FFFF80E007FF80FFFF80E007FF80FFFF80E007FF80FFFF80E007FFE0FF
FF80E007FFE0FFFF80FFFFFFE01FFF80FFFFFFE01FFF80FFFFFFE007FF80FFFF
FFFC07FF80FFFFFFFC07FF80FFFFFFFC07FF80FFFFFFFC07FF80FFFE000C07FF
80FFFE000C07FF80FFF8000007FF80FFF83FE007FF80FFF83FE007FF80FFC03F
FC00FF80FFC03FFC00FF80FFC03FFC00FF80FFC0FFFF00FF80FFC0FFFF00FF80
FFC0FFFF00FF80FFC0FFFF00FF80FFC03FFF00FF80FFC03FFF00FF80FFC03FFF
003F80FFC03FFFC03F80FFC03FFFC03F80FFC03FFFC03F80FFC03FFFC03F80FF
C03FFFC03F80FFC03FFFC03F80FFC03FFFC03F80FFC03FFFC03F80FFC03FFFC0
3F80FFF80FFFF80F80FFF80FFFF80F80FFF80FFFF80F80FFF80FFFF80F80FFF8
0FFFF80F80FFF80FFFF80F80FFF80FFFF80F808FF801FFF80F808FFE01FFF80F
808FFE01FFF80F80E3FE01FFFE0180E3FE01FFFE0180E3FFC07FFE0180E3FFC0
7FFE0180E0FFC07FFE0180FCFFC07FFE0180FCFFC07FFE0180FCFFC1FFFE0180
FCFFC1FFFE0180FC1FC1FFFE0000FF1FC1FFFFC000FF1FC1FFFFC000FFC00FFF
FFC180FFC00FFFFFC180>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
49 70 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a58 {{
0 0 0 -5 39 103 setcachedevice
39.0 0.0 0.0 108.0 0.0 -5.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 39 def
/Height 108 def
/ImageMatrix [39.0 0.0 0.0 -108.0 0.0 108.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<07FFFFFFFE07FFFFFFFE07FFFFFFFE07FFFFFFFE07FFFFFFFE07FFFFFFFE07FF
FFFFFEE0FFFFFFFEE0FFFFFFFEE0FFFFFFFEE0FFFFFFFEE0FFFFFFFEE0FFFFFF
FEE0FFFFFFFEF83FFFFFFEF83FFFFFFEF83FFFFFFEF83FFFFFFEF83FFFFFFEF8
3FFFFFFEF83FFFFFFEF807FFFFFEFE07FFFFFEFE07FFFFFEFE07FFFFFEFE07FF
FFFEFE07FFFFFEFE07FFFFFEFE01FFFFFEFFC1FFFFFEFFC1FFFFFEFFC1FFFFFE
FFC1FFFFFEFFC1FFFFFEFFC1FFFFFEFFC1FFFFFEFFF07FFFFEFFF07FFFFEFFF0
7FFFFEFFF07FFFFEFFF07FFFFEFFF07FFFFEFFF07FFFFEFFFE0FFFFEFFFE0FFF
FEFFFE0FFFFEFFFE0FFFFEFFFE0FFFFEFFFE0FFFFEFFFE0FFFFEFFFF83FFFEFF
FF83FFFEFFFF83FFFEFFFF83FFFEFFFF83FFFEFFFF83FFFEFFFF83FFFEFFFF80
7FFEFFFFE07FFEFFFFE07FFEFFFFE07FFEFFFFE07FFEFFFFE07FFEFFFFE07FFE
FFFFE01FFEFFFFFC1FFEFFFFFC1FFEFFFFFC1FFEFFFFFC1FFEFFFFFC1FFEFFFF
FC1FFEFFFFFC1FFEFFFFFF07FEFFFFFF07FEFFFFFF07FEFFFFFF07FEFFFFFF07
FEFFFFFF07FEFFFFFF07FEFFFFFFE0FEFFFFFFE0FEFFFFFFE0FEFFFFFFE0FEFF
FFFFE0FEFFFFFFE0FEFFFFFFE0FEFFFFFFF83EFFFFFFF83EFFFFFFF83EFFFFFF
F83EFFFFFFF83EFFFFFFF83EFFFFFFF83EFFFFFFF806FFFFFFFE06FFFFFFFE06
FFFFFFFE06FFFFFFFE06FFFFFFFE06FFFFFFFE06FFFFFFFE00FFFFFFFFC0FFFF
FFFFC0FFFFFFFFC0FFFFFFFFC0FFFFFFFFC0FFFFFFFFF0FFFFFFFFF0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
39 108 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a60 {{
0 0 0 0 68 79 setcachedevice
68.0 0.0 0.0 79.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 68 def
/Height 79 def
/ImageMatrix [68.0 0.0 0.0 -79.0 0.0 79.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFFFE0007FFFFFF0FFFFFFE0007FFFFFF0FFFFE007FE007FFFF0FFFFE007FE
007FFFF0FFFF8007FE001FFFF0FFFF807FFFE01FFFF0FFFF807FFFE01FFFF0FF
F003FFFFFC00FFF0FFF003FFFFFC00FFF0FFC003FFFFFC003FF0FFC00FFFFFFF
003FF0FFC00FFFFFFF003FF0FFC07FFFFFFFE03FF0FFC07FFFFFFFE03FF0FE00
7FFFFFFFE007F0FE007FFFFFFFE007F0F8007FFFFFFFE001F0F801FFFFFFFFF8
01F0F801FFFFFFFFF801F0F801FFFFFFFFF801F0F801FFFFFFFFF801F0E001FF
FFFFFFF80070E001FFFFFFFFF80070E001FFFFFFFFF80070E001FFFFFFFFF800
70E001FFFFFFFFF80070E007FFFFFFFFFE0070E007FFFFFFFFFE00700007FFFF
FFFFFE00000007FFFFFFFFFE00000007FFFFFFFFFE00000007FFFFFFFFFE0000
0007FFFFFFFFFE00000007FFFFFFFFFE00000007FFFFFFFFFE00000007FFFFFF
FFFE00000007FFFFFFFFFE00000007FFFFFFFFFE00000007FFFFFFFFFE000000
07FFFFFFFFFE00000007FFFFFFFFFE00000007FFFFFFFFFE00000007FFFFFFFF
FE00000007FFFFFFFFFE00000007FFFFFFFFFE00000007FFFFFFFFFE00000007
FFFFFFFFFE00000007FFFFFFFFFE00000007FFFFFFFFFE00000007FFFFFFFFFE
0000E007FFFFFFFFFE0070E007FFFFFFFFFE0070E007FFFFFFFFFE0070E007FF
FFFFFFFE0070E007FFFFFFFFFE0070E001FFFFFFFFF80070E001FFFFFFFFF800
70E001FFFFFFFFF80070F801FFFFFFFFF801F0F801FFFFFFFFF801F0F801FFFF
FFFFF801F0F801FFFFFFFFF801F0FE007FFFFFFFE007F0FE007FFFFFFFE007F0
FE007FFFFFFFE007F0FFC07FFFFFFFE03FF0FFC07FFFFFFFE03FF0FFC00FFFFF
FF003FF0FFC00FFFFFFF003FF0FFC003FFFFFC003FF0FFF003FFFFFC00FFF0FF
F003FFFFFC00FFF0FFFF807FFFE01FFFF0FFFF807FFFE01FFFF0FFFFE007FE00
7FFFF0FFFFE007FE007FFFF0FFFFE00000007FFFF0FFFFFFE0007FFFFFF0FFFF
FFE0007FFFFFF0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
68 79 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a87 {{
0 0 0 5 49 77 setcachedevice
49.0 0.0 0.0 72.0 0.0 5.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 49 def
/Height 72 def
/ImageMatrix [49.0 0.0 0.0 -72.0 0.0 72.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFF000000380FFFFF000000380FFFFF000000380FFFFFFF807FF80FFFFFFF8
07FF80FFFFFFF807FF80FFFFFFF807FF80FFFFFFF807FF80FFFFFFF807FF80FF
FFFFF807FF80FFFFFFF807FF80FFFFFFF807FF80FFFFFFF807FF80FFFFFFF807
FF80FFFFFFF807FF80FFFFFFF807FF80FFFFFFF807FF80FFFFFFF807FF80FFFF
FFF807FF8000000000000000000000000000000000000000000003FFFFF807FF
8003FFFFF807FF80E3FFFFF807FF80E3FFFFF807FF80E0FFFFF807FF80F8FFFF
F807FF80F8FFFFF807FF80F8FFFFF807FF80F8FFFFF807FF80F83FFFF807FF80
FF3FFFF807FF80FF3FFFF807FF80FFC7FFF807FF80FFC7FFF807FF80FFC7FFF8
07FF80FFC7FFF807FF80FFC1FFF807FF80FFF1FFF807FF80FFF1FFF807FF80FF
FE3FF807FF80FFFE3FF807FF80FFFE3FF807FF80FFFE3FF807FF80FFFE3FF807
FF80FFFF8FF807FF80FFFF8FF807FF80FFFFF3F807FF80FFFFF3F807FF80FFFF
F3F807FF80FFFFF3F807FF80FFFFF3F807FF80FFFFFC7807FF80FFFFFC7807FF
80FFFFFC1807FF80FFFFFF1807FF80FFFFFF1807FF80FFFFFF1807FF80FFFFFF
1807FF80FFFFFFE007FF80FFFFFFE007FF80FFFFFFE007FF80FFFFFFF807FF80
FFFFFFF807FF80FFFFFFF807FF80FFFFFFF807FF80FFFFFFF807FF80FFFFFFFF
07FF80FFFFFFFF07FF80FFFFFFFF07FF80FFFFFFFF07FF80>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
49 72 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a89 {{
0 0 0 29 58 101 setcachedevice
58.0 0.0 0.0 72.0 0.0 29.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 58 def
/Height 72 def
/ImageMatrix [58.0 0.0 0.0 -72.0 0.0 72.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<03FFFFFFFFFFFFC003FFFFFFFFFFFFC000FFFFFFFFFFFFC000FFFFFFFFFFFFC0
00FFFFFFFFFFFFC000FFFFFFFFFFFFC000FFFFFFFFFFFFC000FFFFFFFFFFFFC0
00FFFFFFFFFFFFC000FFFFFFFFFFFFC0E03FFFFFFFFFFFC0E03FFFFFFFFFFFC0
E03FFFFFFFFFFFC0E03FFFFFFFFFFFC0E03FFFFFFFFFFFC0E03FFFFFFFFFFFC0
E03FFFFFFFFFFFC0E03FFFFFFFFFFFC0E03FFFFFFFFFFFC0E007FFFFFFFFFFC0
F807FFFFFFFFFFC0F807FFFFFFFFFFC0F807FFFFFFFFFFC0F807FFFFFFFFFFC0
F8078003FF801FC0F8078003FF801FC0F8000000FE0003C0F8000FF8FE0FE3C0
F8000FF8FE0FE3C0FF003FFF300FE3C0FF003FFF300FE3C0FF003FFF000FE0C0
FF003FFFC00FF8C0FF003FFFC00FF8C0FF003FFFF00FF8C0FF003FFFF00FF8C0
FF003FFFF00FF8C0FF003FFFF00FF8C0FF003FFFF003F800FFC03FFFFE03FF00
FFC03FFFFE03FF00FFC03FFFFE03FFC0FFC03FFFFE03FFC0FFC03FFFFE03FFC0
FFC03FFFFE03FFC0FFC03FFFFE03FFC0FFC03FFFFE03FFC0FFC03FFFFE03FFC0
FFF00FFFFF807FC0FFF00FFFFF807FC0FFF00FFFFF807FC0FFF00FFFFF807FC0
FFF00FFFFF807FC0FFF00FFFFF807FC0FFF00FFFFF807FC0FFF00FFFFF807FC0
FFF00FFFFF807FC0FFF00FFFFF807FC0FFFE03FFFFF01FC0FFFE03FFFFF01FC0
FFFE03FFFFF01FC0FFFE03FFFFF01FC0FFFE03FFFFF01FC0FFFE03FFFFF01FC0
FFFE03FFFFF01FC0FFFE03FFFFF01FC0FFFE03FFFFF01FC0FFFE007FFFF003C0
FFFF807FFFFC03C0FFFF807FFFFC03C0FFFF83FFFFFC1FC0FFFF83FFFFFC1FC0
>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
58 72 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
/a92 {{
0 0 0 0 66 75 setcachedevice
66.0 0.0 0.0 75.0 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 66 def
/Height 75 def
/ImageMatrix [66.0 0.0 0.0 -74.999992 0.0 74.999992]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<8000000000000007C08000000000000007C08000000000000007C0FFC001FFFF
FF8007C0FFC001FFFFFF8007C0FFF801FFFFFFFF07C0FFF801FFFFFFFF07C0FF
F801FFFFFFFF00C0FFF801FFFFFFFFC0C0FFF801FFFFFFFFC0C0FFF801FFFFFF
FFC0C0FFF801FFFFFFFFC0C0FFF801FFFFFFFFF8C0FFF801FFFFFFFFF8C0FFF8
01FFFFFFFFF8C0FFF801FFFFFFFFF8C0FFF801FFFFFFFFF8C0FFF801FFFFFFFF
F8C0FFF801FFFFFFFFF8C0FFF801FFFFFFFFF800FFF801FFFFFFFFFE00FFF801
FFFFFFFFFE00FFF801FFFFFFFFFE00FFF801FFFFFFFFFE00FFF801FFFFFFFFFE
00FFF801FFFFFFFFFE00FFF801FFFE3FFFFE00FFF801FFFE3FFFFFC0FFF801FF
FE3FFFFFC0FFF801FFFE3FFFFFC0FFF801FFFE3FFFFFC0FFF801FFFE3FFFFFC0
FFF801FFFE3FFFFFC0FFF801FFFE3FFFFFC0FFF801FFFE3FFFFFC0FFF801FFFE
3FFFFFC0FFF801FFF83FFFFFC0FFF801FFF83FFFFFC0FFF80000003FFFFFC0FF
F80000003FFFFFC0FFF80000003FFFFFC0FFF801FFF83FFFFFC0FFF801FFF83F
FFFFC0FFF801FFF83FFFFFC0FFF801FFFE3FFFFFC0FFF801FFFE3FFFFFC0FFF8
01FFFE3FFFFFC0FFF801FFFE3FFFFFC0FFF801FFFE3FFFFFC0FFF801FFFE3FFF
FFC0FFF801FFFE3FFFC7C0FFF801FFFE3FFFC7C0FFF801FFFE3FFFC7C0FFF801
FFFFFFFFC7C0FFF801FFFFFFFFC7C0FFF801FFFFFFFFC7C0FFF801FFFFFFFFC7
C0FFF801FFFFFFFFC7C0FFF801FFFFFFFFC7C0FFF801FFFFFFFFC7C0FFF801FF
FFFFFF07C0FFF801FFFFFFFF07C0FFF801FFFFFFFF07C0FFF801FFFFFFFF1FC0
FFF801FFFFFFFF1FC0FFF801FFFFFFFC1FC0FFF801FFFFFFFC1FC0FFF801FFFF
FFFC1FC0FFF801FFFFFFFC1FC0FFF801FFFFFFFC1FC0FFC001FFFFFF801FC0FF
C001FFFFFF801FC0800000000000001FC0800000000000001FC0800000000000
001FC0>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
66 75 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/C/N17 -1 TZ
171.0 432.0 297.0 252.0 re
W
n
0.1 0.0 0.0 0.1 0.0 0.0 cm
q
Q
q
n
1802.97998 6847.459961 m
1802.97998 4568.97998 l
4645.399902 4568.97998 l
4645.399902 6847.459961 l
1802.97998 6847.459961 l
h
eoclip
n
2.99339 w
1 j
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -4670.0 m
4600.839844 -4670.0 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -6782.959961 m
4600.839844 -6782.959961 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -4670.0 m
1921.469971 -6782.959961 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -4670.0 m
4600.839844 -6782.959961 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -4670.0 m
4600.839844 -4670.0 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -4670.0 m
1921.469971 -6782.959961 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -4670.0 m
1921.469971 -4697.049805 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -6782.959961 m
1921.469971 -6755.949707 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
185.948013 458.546021 m
/N9 7.200012 Tf
(-5)
[2.39755 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
2189.459961 -4670.0 m
2189.459961 -4697.049805 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
2189.459961 -6782.959961 m
2189.459961 -6755.949707 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
212.748016 458.546021 m
/N9 7.200012 Tf
(-4)
[2.39755 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
2457.469971 -4670.0 m
2457.469971 -4697.049805 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
2457.469971 -6782.959961 m
2457.469971 -6755.949707 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
239.547012 458.546021 m
/N9 7.200012 Tf
(-3)
[2.39755 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
2725.469971 -4670.0 m
2725.469971 -4697.049805 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
2725.469971 -6782.959961 m
2725.469971 -6755.949707 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
266.348022 458.546021 m
/N9 7.200012 Tf
(-2)
[2.39755 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
2993.459961 -4670.0 m
2993.459961 -4697.049805 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
2993.459961 -6782.959961 m
2993.459961 -6755.949707 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
293.147003 458.546021 m
/N9 7.200012 Tf
(-1)
[2.39755 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
3261.469971 -4670.0 m
3261.469971 -4697.049805 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
3261.469971 -6782.959961 m
3261.469971 -6755.949707 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
324.147003 458.546021 m
/N9 7.200012 Tf
(0) show
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
3528.829834 -4670.0 m
3528.829834 -4697.049805 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
3528.829834 -6782.959961 m
3528.829834 -6755.949707 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
350.897003 458.546021 m
/N9 7.200012 Tf
(1) show
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
3796.879883 -4670.0 m
3796.879883 -4697.049805 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
3796.879883 -6782.959961 m
3796.879883 -6755.949707 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
377.696014 458.546021 m
/N9 7.200012 Tf
(2) show
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4064.919922 -4670.0 m
4064.919922 -4697.049805 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4064.919922 -6782.959961 m
4064.919922 -6755.949707 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
404.497009 458.546021 m
/N9 7.200012 Tf
(3) show
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4332.969727 -4670.0 m
4332.969727 -4697.049805 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4332.969727 -6782.959961 m
4332.969727 -6755.949707 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
431.297028 458.546021 m
/N9 7.200012 Tf
(4) show
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -4670.0 m
4600.839844 -4697.049805 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -6782.959961 m
4600.839844 -6755.949707 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
458.096008 458.546021 m
/N9 7.200012 Tf
(5) show
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -4670.0 m
1948.459961 -4670.0 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -4670.0 m
4573.969727 -4670.0 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
186.397003 464.345032 m
/N9 7.200012 Tf
(0) show
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -4881.409668 m
1948.459961 -4881.409668 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -4881.409668 m
4573.969727 -4881.409668 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
180.397003 485.496033 m
/N9 7.200012 Tf
(0.1)
[4.003205 2.001602 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -5092.47998 m
1948.459961 -5092.47998 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -5092.47998 m
4573.969727 -5092.47998 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
180.397003 506.596039 m
/N9 7.200012 Tf
(0.2)
[4.003205 2.001602 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -5303.889648 m
1948.459961 -5303.889648 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -5303.889648 m
4573.969727 -5303.889648 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
180.397003 527.746033 m
/N9 7.200012 Tf
(0.3)
[4.003205 2.001602 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -5514.959961 m
1948.459961 -5514.959961 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -5514.959961 m
4573.969727 -5514.959961 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
180.397003 548.846008 m
/N9 7.200012 Tf
(0.4)
[4.003205 2.001602 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -5726.529785 m
1948.459961 -5726.529785 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -5726.529785 m
4573.969727 -5726.529785 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
180.397003 569.997009 m
/N9 7.200012 Tf
(0.5)
[4.003205 2.001602 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -5937.939941 m
1948.459961 -5937.939941 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -5937.939941 m
4573.969727 -5937.939941 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
180.397003 591.146057 m
/N9 7.200012 Tf
(0.6)
[4.003205 2.001602 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -6149.009766 m
1948.459961 -6149.009766 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -6149.009766 m
4573.969727 -6149.009766 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
180.397003 612.246033 m
/N9 7.200012 Tf
(0.7)
[4.003205 2.001602 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -6360.449707 m
1948.459961 -6360.449707 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -6360.449707 m
4573.969727 -6360.449707 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
180.397003 633.39502 m
/N9 7.200012 Tf
(0.8)
[4.003205 2.001602 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -6571.449707 m
1948.459961 -6571.449707 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -6571.449707 m
4573.969727 -6571.449707 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
180.397003 654.495056 m
/N9 7.200012 Tf
(0.9)
[4.003205 2.001602 4.003205 ] pdfxs
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -6782.959961 m
1948.459961 -6782.959961 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -6782.959961 m
4573.969727 -6782.959961 l
S
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
186.397003 675.646057 m
/N9 7.200012 Tf
(1) show
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -4670.0 m
4600.839844 -4670.0 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -6782.959961 m
4600.839844 -6782.959961 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -4670.0 m
1921.469971 -6782.959961 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
4600.839844 -4670.0 m
4600.839844 -6782.959961 l
S
Q
Q
q
n
1921.469971 6782.959961 m
1921.469971 4669.489746 l
4601.350098 4669.489746 l
4601.350098 6782.959961 l
1921.469971 6782.959961 l
h
eoclip
n
2.99339 w
1 j
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1948.459961 -4670.0 m
2028.469971 -4670.0 l
2055.469971 -4670.509766 l
2189.459961 -4670.509766 l
2215.959961 -4671.02002 l
2242.969971 -4671.02002 l
2269.959961 -4671.529785 l
2296.459961 -4671.529785 l
2323.469971 -4671.870117 l
2349.969971 -4672.379883 l
2376.969971 -4672.890137 l
2403.969971 -4673.399902 l
2430.459961 -4674.419922 l
2457.469971 -4674.939941 l
2483.969971 -4676.469727 l
2510.959961 -4678.0 l
2537.969971 -4679.529785 l
2564.469971 -4681.399902 l
2591.459961 -4683.949707 l
2617.959961 -4687.009766 l
2644.969971 -4690.919922 l
2671.959961 -4695.509766 l
2698.459961 -4700.959961 l
2725.469971 -4707.929688 l
2751.959961 -4715.919922 l
2778.969971 -4725.959961 l
2805.469971 -4738.029785 l
2832.459961 -4753.0 l
2859.469971 -4770.009766 l
2885.969971 -4790.929688 l
2912.959961 -4815.929688 l
2939.459961 -4845.52002 l
2966.469971 -4880.899902 l
2993.459961 -4921.889648 l
3019.959961 -4969.509766 l
3047.0 -5024.959961 l
3073.359863 -5087.889648 l
3100.409912 -5158.97998 l
3127.449951 -5238.409668 l
3153.97998 -5324.97998 l
3180.849854 -5418.52002 l
3207.389893 -5518.02002 l
3234.429932 -5620.909668 l
3261.469971 -5726.529785 l
3287.829834 -5831.97998 l
3314.879883 -5934.879883 l
3341.409912 -6034.549805 l
3368.449951 -6127.919922 l
3394.97998 -6214.489746 l
3421.849854 -6293.919922 l
3448.900146 -6364.959961 l
3475.429932 -6427.959961 l
3502.469971 -6483.449707 l
3528.829834 -6530.959961 l
3555.879883 -6571.959961 l
3582.919922 -6607.459961 l
3609.449951 -6636.949707 l
3636.319824 -6661.949707 l
3662.859863 -6682.959961 l
3689.900146 -6699.959961 l
3716.939941 -6714.959961 l
3743.469971 -6726.959961 l
3770.349854 -6736.959961 l
3796.879883 -6744.949707 l
3823.919922 -6751.959961 l
3850.449951 -6757.449707 l
3877.329834 -6761.959961 l
3904.369873 -6765.949707 l
3930.900146 -6768.959961 l
3957.939941 -6771.459961 l
3984.47998 -6773.449707 l
4011.349854 -6774.949707 l
4038.389893 -6776.469727 l
4064.919922 -6777.959961 l
4091.969971 -6778.449707 l
4118.330078 -6779.459961 l
4145.370117 -6779.949707 l
4172.409668 -6780.459961 l
4198.949707 -6780.959961 l
4225.819824 -6781.449707 l
4252.350098 -6781.449707 l
4279.390137 -6781.959961 l
4306.439941 -6781.959961 l
4332.969727 -6782.449707 l
4466.819824 -6782.449707 l
4493.859863 -6782.959961 l
4600.839844 -6782.959961 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -4670.0 m
1948.459961 -4670.0 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1948.459961 -4670.509766 m
1974.959961 -4670.509766 l
2001.969971 -4671.02002 l
2028.469971 -4671.529785 l
2055.469971 -4671.870117 l
2082.469971 -4672.379883 l
2108.959961 -4673.399902 l
2135.969971 -4674.939941 l
2162.469971 -4676.97998 l
2189.459961 -4679.529785 l
2215.959961 -4682.419922 l
2242.969971 -4686.5 l
2269.959961 -4691.939941 l
2296.459961 -4698.409668 l
2323.469971 -4706.909668 l
2349.969971 -4717.449707 l
2376.969971 -4729.870117 l
2403.969971 -4745.009766 l
2430.459961 -4763.040039 l
2457.469971 -4783.959961 l
2483.969971 -4808.449707 l
2510.959961 -4837.02002 l
2537.969971 -4868.47998 l
2564.469971 -4904.370117 l
2591.459961 -4943.489746 l
2617.959961 -4986.52002 l
2644.969971 -5031.929688 l
2671.959961 -5080.399902 l
2698.459961 -5130.409668 l
2725.469971 -5181.429688 l
2751.959961 -5231.939941 l
2778.969971 -5281.949707 l
2805.469971 -5329.909668 l
2832.459961 -5373.959961 l
2859.469971 -5413.929688 l
2885.969971 -5447.939941 l
2912.959961 -5476.009766 l
2939.459961 -5496.419922 l
2966.469971 -5509.0 l
2993.459961 -5512.909668 l
3019.959961 -5509.0 l
3047.0 -5496.419922 l
3073.359863 -5476.009766 l
3100.409912 -5447.939941 l
3127.449951 -5413.929688 l
3153.97998 -5373.959961 l
3180.849854 -5329.909668 l
3207.389893 -5281.949707 l
3234.429932 -5231.939941 l
3261.469971 -5181.429688 l
3287.829834 -5130.409668 l
3314.879883 -5080.399902 l
3341.409912 -5031.929688 l
3368.449951 -4986.52002 l
3394.97998 -4943.489746 l
3421.849854 -4904.370117 l
3448.900146 -4868.47998 l
3475.429932 -4837.02002 l
3502.469971 -4808.449707 l
3528.829834 -4783.959961 l
3555.879883 -4763.040039 l
3582.919922 -4745.009766 l
3609.449951 -4729.870117 l
3636.319824 -4717.449707 l
3662.859863 -4706.909668 l
3689.900146 -4698.409668 l
3716.939941 -4691.939941 l
3743.469971 -4686.5 l
3770.349854 -4682.419922 l
3796.879883 -4679.529785 l
3823.919922 -4676.97998 l
3850.449951 -4674.939941 l
3877.329834 -4673.399902 l
3904.369873 -4672.379883 l
3930.900146 -4671.870117 l
3957.939941 -4671.529785 l
3984.47998 -4671.02002 l
4011.349854 -4670.509766 l
4064.919922 -4670.509766 l
4091.969971 -4670.0 l
4600.839844 -4670.0 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -4670.509766 m
1948.459961 -4670.509766 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1948.459961 -4670.0 m
2430.459961 -4670.0 l
2457.469971 -4670.509766 l
2510.959961 -4670.509766 l
2537.969971 -4671.02002 l
2564.469971 -4671.529785 l
2591.459961 -4671.870117 l
2617.959961 -4672.379883 l
2644.969971 -4673.399902 l
2671.959961 -4674.939941 l
2698.459961 -4676.97998 l
2725.469971 -4679.529785 l
2751.959961 -4682.419922 l
2778.969971 -4686.5 l
2805.469971 -4691.939941 l
2832.459961 -4698.409668 l
2859.469971 -4706.909668 l
2885.969971 -4717.449707 l
2912.959961 -4729.870117 l
2939.459961 -4745.009766 l
2966.469971 -4763.040039 l
2993.459961 -4783.959961 l
3019.959961 -4808.449707 l
3047.0 -4837.02002 l
3073.359863 -4868.47998 l
3100.409912 -4904.370117 l
3127.449951 -4943.489746 l
3153.97998 -4986.52002 l
3180.849854 -5031.929688 l
3207.389893 -5080.399902 l
3234.429932 -5130.409668 l
3261.469971 -5181.429688 l
3287.829834 -5231.939941 l
3314.879883 -5281.949707 l
3341.409912 -5329.909668 l
3368.449951 -5373.959961 l
3394.97998 -5413.929688 l
3421.849854 -5447.939941 l
3448.900146 -5476.009766 l
3475.429932 -5496.419922 l
3502.469971 -5509.0 l
3528.829834 -5512.909668 l
3555.879883 -5509.0 l
3582.919922 -5496.419922 l
3609.449951 -5476.009766 l
3636.319824 -5447.939941 l
3662.859863 -5413.929688 l
3689.900146 -5373.959961 l
3716.939941 -5329.909668 l
3743.469971 -5281.949707 l
3770.349854 -5231.939941 l
3796.879883 -5181.429688 l
3823.919922 -5130.409668 l
3850.449951 -5080.399902 l
3877.329834 -5031.929688 l
3904.369873 -4986.52002 l
3930.900146 -4943.489746 l
3957.939941 -4904.370117 l
3984.47998 -4868.47998 l
4011.349854 -4837.02002 l
4038.389893 -4808.449707 l
4064.919922 -4783.959961 l
4091.969971 -4763.040039 l
4118.330078 -4745.009766 l
4145.370117 -4729.870117 l
4172.409668 -4717.449707 l
4198.949707 -4706.909668 l
4225.819824 -4698.409668 l
4252.350098 -4691.939941 l
4279.390137 -4686.5 l
4306.439941 -4682.419922 l
4332.969727 -4679.529785 l
4359.839844 -4676.97998 l
4386.370117 -4674.939941 l
4413.419922 -4673.399902 l
4439.949707 -4672.379883 l
4466.819824 -4671.870117 l
4493.859863 -4671.529785 l
4520.399902 -4671.02002 l
4547.439941 -4670.509766 l
4600.839844 -4670.509766 l
S
Q
q
1.0 0.0 0.0 -1.0 0.0 0.0 cm
n
1921.469971 -4670.0 m
1948.459961 -4670.0 l
S
Q
Q
q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
426.902008 438.328033 m
/N16 12.0 Tf
(x) show
155.105988 656.077026 m
(y) show
350.365967 448.343994 m
/N15 9.600006 Tf
(m) show
356.22403 445.604034 m
/N14 7.200012 Tf
(0) show
295.421021 448.344025 m
/N15 9.600006 Tf
(m) show
301.138 445.22702 m
/N14 7.200012 Tf
(1) show
Q
q
1435.200073 0.0 0.0 -4.8 1257.359985 1461.839966 cm
Q
q
10.0 0.0 0.0 10.0 0.0 0.0 cm
Q
Q
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%DocumentNeededResources:
%%+ font Helvetica
%%+ font Times-Roman
%%+ font Times-Italic
%%+ font Symbol
%%DocumentSuppliedResources:
%%+ font C
%%+ font A
%%+ font D
%%+ font B
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%+ procset (Adobe Acrobat - general image support) 1.2 0
%%+ procset (Adobe Acrobat - monochrome image support) 1.2 0
%%+ procset (Adobe Acrobat - color image support) 1.2 0
%%+ procset (Adobe Acrobat - indexed color image support) 1.2 0
%%EOF
